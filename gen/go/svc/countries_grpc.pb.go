// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: countries.proto

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Countries_CreateCountryByAdmin_FullMethodName  = "/citiesdir.Countries/CreateCountryByAdmin"
	Countries_UpdateCountryByAdmin_FullMethodName  = "/citiesdir.Countries/UpdateCountryByAdmin"
	Countries_DeleteCountryByAdmin_FullMethodName  = "/citiesdir.Countries/DeleteCountryByAdmin"
	Countries_GetCountryById_FullMethodName        = "/citiesdir.Countries/GetCountryById"
	Countries_SearchCountriesByName_FullMethodName = "/citiesdir.Countries/SearchCountriesByName"
	Countries_GetListCountries_FullMethodName      = "/citiesdir.Countries/GetListCountries"
)

// CountriesClient is the client API for Countries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountriesClient interface {
	CreateCountryByAdmin(ctx context.Context, in *CreateCountryByAdminRequest, opts ...grpc.CallOption) (*Country, error)
	UpdateCountryByAdmin(ctx context.Context, in *UpdateCountryByAdminRequest, opts ...grpc.CallOption) (*Country, error)
	DeleteCountryByAdmin(ctx context.Context, in *DeleteCountryByAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCountryById(ctx context.Context, in *GetCountryByIdRequest, opts ...grpc.CallOption) (*Country, error)
	SearchCountriesByName(ctx context.Context, in *SearchCountriesByNameRequest, opts ...grpc.CallOption) (*Country, error)
	GetListCountries(ctx context.Context, in *GetListCountriesRequest, opts ...grpc.CallOption) (*ListCountries, error)
}

type countriesClient struct {
	cc grpc.ClientConnInterface
}

func NewCountriesClient(cc grpc.ClientConnInterface) CountriesClient {
	return &countriesClient{cc}
}

func (c *countriesClient) CreateCountryByAdmin(ctx context.Context, in *CreateCountryByAdminRequest, opts ...grpc.CallOption) (*Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Country)
	err := c.cc.Invoke(ctx, Countries_CreateCountryByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) UpdateCountryByAdmin(ctx context.Context, in *UpdateCountryByAdminRequest, opts ...grpc.CallOption) (*Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Country)
	err := c.cc.Invoke(ctx, Countries_UpdateCountryByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) DeleteCountryByAdmin(ctx context.Context, in *DeleteCountryByAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Countries_DeleteCountryByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) GetCountryById(ctx context.Context, in *GetCountryByIdRequest, opts ...grpc.CallOption) (*Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Country)
	err := c.cc.Invoke(ctx, Countries_GetCountryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) SearchCountriesByName(ctx context.Context, in *SearchCountriesByNameRequest, opts ...grpc.CallOption) (*Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Country)
	err := c.cc.Invoke(ctx, Countries_SearchCountriesByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) GetListCountries(ctx context.Context, in *GetListCountriesRequest, opts ...grpc.CallOption) (*ListCountries, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCountries)
	err := c.cc.Invoke(ctx, Countries_GetListCountries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountriesServer is the server API for Countries service.
// All implementations must embed UnimplementedCountriesServer
// for forward compatibility.
type CountriesServer interface {
	CreateCountryByAdmin(context.Context, *CreateCountryByAdminRequest) (*Country, error)
	UpdateCountryByAdmin(context.Context, *UpdateCountryByAdminRequest) (*Country, error)
	DeleteCountryByAdmin(context.Context, *DeleteCountryByAdminRequest) (*emptypb.Empty, error)
	GetCountryById(context.Context, *GetCountryByIdRequest) (*Country, error)
	SearchCountriesByName(context.Context, *SearchCountriesByNameRequest) (*Country, error)
	GetListCountries(context.Context, *GetListCountriesRequest) (*ListCountries, error)
	mustEmbedUnimplementedCountriesServer()
}

// UnimplementedCountriesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCountriesServer struct{}

func (UnimplementedCountriesServer) CreateCountryByAdmin(context.Context, *CreateCountryByAdminRequest) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountryByAdmin not implemented")
}
func (UnimplementedCountriesServer) UpdateCountryByAdmin(context.Context, *UpdateCountryByAdminRequest) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountryByAdmin not implemented")
}
func (UnimplementedCountriesServer) DeleteCountryByAdmin(context.Context, *DeleteCountryByAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCountryByAdmin not implemented")
}
func (UnimplementedCountriesServer) GetCountryById(context.Context, *GetCountryByIdRequest) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryById not implemented")
}
func (UnimplementedCountriesServer) SearchCountriesByName(context.Context, *SearchCountriesByNameRequest) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCountriesByName not implemented")
}
func (UnimplementedCountriesServer) GetListCountries(context.Context, *GetListCountriesRequest) (*ListCountries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCountries not implemented")
}
func (UnimplementedCountriesServer) mustEmbedUnimplementedCountriesServer() {}
func (UnimplementedCountriesServer) testEmbeddedByValue()                   {}

// UnsafeCountriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountriesServer will
// result in compilation errors.
type UnsafeCountriesServer interface {
	mustEmbedUnimplementedCountriesServer()
}

func RegisterCountriesServer(s grpc.ServiceRegistrar, srv CountriesServer) {
	// If the following call pancis, it indicates UnimplementedCountriesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Countries_ServiceDesc, srv)
}

func _Countries_CreateCountryByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).CreateCountryByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_CreateCountryByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).CreateCountryByAdmin(ctx, req.(*CreateCountryByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_UpdateCountryByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).UpdateCountryByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_UpdateCountryByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).UpdateCountryByAdmin(ctx, req.(*UpdateCountryByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_DeleteCountryByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCountryByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).DeleteCountryByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_DeleteCountryByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).DeleteCountryByAdmin(ctx, req.(*DeleteCountryByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_GetCountryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).GetCountryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_GetCountryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).GetCountryById(ctx, req.(*GetCountryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_SearchCountriesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCountriesByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).SearchCountriesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_SearchCountriesByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).SearchCountriesByName(ctx, req.(*SearchCountriesByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_GetListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).GetListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_GetListCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).GetListCountries(ctx, req.(*GetListCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Countries_ServiceDesc is the grpc.ServiceDesc for Countries service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Countries_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citiesdir.Countries",
	HandlerType: (*CountriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCountryByAdmin",
			Handler:    _Countries_CreateCountryByAdmin_Handler,
		},
		{
			MethodName: "UpdateCountryByAdmin",
			Handler:    _Countries_UpdateCountryByAdmin_Handler,
		},
		{
			MethodName: "DeleteCountryByAdmin",
			Handler:    _Countries_DeleteCountryByAdmin_Handler,
		},
		{
			MethodName: "GetCountryById",
			Handler:    _Countries_GetCountryById_Handler,
		},
		{
			MethodName: "SearchCountriesByName",
			Handler:    _Countries_SearchCountriesByName_Handler,
		},
		{
			MethodName: "GetListCountries",
			Handler:    _Countries_GetListCountries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "countries.proto",
}
