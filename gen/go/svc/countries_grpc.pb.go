// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: countries.proto

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Countries_CreateCountry_FullMethodName       = "/citiesdir.Countries/CreateCountry"
	Countries_UpdateCountry_FullMethodName       = "/citiesdir.Countries/UpdateCountry"
	Countries_DeleteCountry_FullMethodName       = "/citiesdir.Countries/DeleteCountry"
	Countries_GetCountryById_FullMethodName      = "/citiesdir.Countries/GetCountryById"
	Countries_UpdateCountryStatus_FullMethodName = "/citiesdir.Countries/UpdateCountryStatus"
	Countries_SearchCountries_FullMethodName     = "/citiesdir.Countries/SearchCountries"
)

// CountriesClient is the client API for Countries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountriesClient interface {
	CreateCountry(ctx context.Context, in *CreateCountryBySysAdminRequestMessage, opts ...grpc.CallOption) (*Country, error)
	UpdateCountry(ctx context.Context, in *UpdateCountryBySysAdminRequestMessage, opts ...grpc.CallOption) (*Country, error)
	DeleteCountry(ctx context.Context, in *DeleteCountryBySysAdminRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCountryById(ctx context.Context, in *GetCountryByIdRequestMessage, opts ...grpc.CallOption) (*Country, error)
	UpdateCountryStatus(ctx context.Context, in *UpdateCountryStatusBySysAdminRequestMessage, opts ...grpc.CallOption) (*Country, error)
	SearchCountries(ctx context.Context, in *SearchCountriesRequestMessage, opts ...grpc.CallOption) (*ListCountries, error)
}

type countriesClient struct {
	cc grpc.ClientConnInterface
}

func NewCountriesClient(cc grpc.ClientConnInterface) CountriesClient {
	return &countriesClient{cc}
}

func (c *countriesClient) CreateCountry(ctx context.Context, in *CreateCountryBySysAdminRequestMessage, opts ...grpc.CallOption) (*Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Country)
	err := c.cc.Invoke(ctx, Countries_CreateCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) UpdateCountry(ctx context.Context, in *UpdateCountryBySysAdminRequestMessage, opts ...grpc.CallOption) (*Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Country)
	err := c.cc.Invoke(ctx, Countries_UpdateCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) DeleteCountry(ctx context.Context, in *DeleteCountryBySysAdminRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Countries_DeleteCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) GetCountryById(ctx context.Context, in *GetCountryByIdRequestMessage, opts ...grpc.CallOption) (*Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Country)
	err := c.cc.Invoke(ctx, Countries_GetCountryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) UpdateCountryStatus(ctx context.Context, in *UpdateCountryStatusBySysAdminRequestMessage, opts ...grpc.CallOption) (*Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Country)
	err := c.cc.Invoke(ctx, Countries_UpdateCountryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countriesClient) SearchCountries(ctx context.Context, in *SearchCountriesRequestMessage, opts ...grpc.CallOption) (*ListCountries, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCountries)
	err := c.cc.Invoke(ctx, Countries_SearchCountries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountriesServer is the server API for Countries service.
// All implementations must embed UnimplementedCountriesServer
// for forward compatibility.
type CountriesServer interface {
	CreateCountry(context.Context, *CreateCountryBySysAdminRequestMessage) (*Country, error)
	UpdateCountry(context.Context, *UpdateCountryBySysAdminRequestMessage) (*Country, error)
	DeleteCountry(context.Context, *DeleteCountryBySysAdminRequestMessage) (*emptypb.Empty, error)
	GetCountryById(context.Context, *GetCountryByIdRequestMessage) (*Country, error)
	UpdateCountryStatus(context.Context, *UpdateCountryStatusBySysAdminRequestMessage) (*Country, error)
	SearchCountries(context.Context, *SearchCountriesRequestMessage) (*ListCountries, error)
	mustEmbedUnimplementedCountriesServer()
}

// UnimplementedCountriesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCountriesServer struct{}

func (UnimplementedCountriesServer) CreateCountry(context.Context, *CreateCountryBySysAdminRequestMessage) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountry not implemented")
}
func (UnimplementedCountriesServer) UpdateCountry(context.Context, *UpdateCountryBySysAdminRequestMessage) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountry not implemented")
}
func (UnimplementedCountriesServer) DeleteCountry(context.Context, *DeleteCountryBySysAdminRequestMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCountry not implemented")
}
func (UnimplementedCountriesServer) GetCountryById(context.Context, *GetCountryByIdRequestMessage) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryById not implemented")
}
func (UnimplementedCountriesServer) UpdateCountryStatus(context.Context, *UpdateCountryStatusBySysAdminRequestMessage) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountryStatus not implemented")
}
func (UnimplementedCountriesServer) SearchCountries(context.Context, *SearchCountriesRequestMessage) (*ListCountries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCountries not implemented")
}
func (UnimplementedCountriesServer) mustEmbedUnimplementedCountriesServer() {}
func (UnimplementedCountriesServer) testEmbeddedByValue()                   {}

// UnsafeCountriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountriesServer will
// result in compilation errors.
type UnsafeCountriesServer interface {
	mustEmbedUnimplementedCountriesServer()
}

func RegisterCountriesServer(s grpc.ServiceRegistrar, srv CountriesServer) {
	// If the following call pancis, it indicates UnimplementedCountriesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Countries_ServiceDesc, srv)
}

func _Countries_CreateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryBySysAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).CreateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_CreateCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).CreateCountry(ctx, req.(*CreateCountryBySysAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_UpdateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryBySysAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).UpdateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_UpdateCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).UpdateCountry(ctx, req.(*UpdateCountryBySysAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_DeleteCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCountryBySysAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).DeleteCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_DeleteCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).DeleteCountry(ctx, req.(*DeleteCountryBySysAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_GetCountryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryByIdRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).GetCountryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_GetCountryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).GetCountryById(ctx, req.(*GetCountryByIdRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_UpdateCountryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryStatusBySysAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).UpdateCountryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_UpdateCountryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).UpdateCountryStatus(ctx, req.(*UpdateCountryStatusBySysAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Countries_SearchCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCountriesRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountriesServer).SearchCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Countries_SearchCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountriesServer).SearchCountries(ctx, req.(*SearchCountriesRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Countries_ServiceDesc is the grpc.ServiceDesc for Countries service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Countries_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citiesdir.Countries",
	HandlerType: (*CountriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCountry",
			Handler:    _Countries_CreateCountry_Handler,
		},
		{
			MethodName: "UpdateCountry",
			Handler:    _Countries_UpdateCountry_Handler,
		},
		{
			MethodName: "DeleteCountry",
			Handler:    _Countries_DeleteCountry_Handler,
		},
		{
			MethodName: "GetCountryById",
			Handler:    _Countries_GetCountryById_Handler,
		},
		{
			MethodName: "UpdateCountryStatus",
			Handler:    _Countries_UpdateCountryStatus_Handler,
		},
		{
			MethodName: "SearchCountries",
			Handler:    _Countries_SearchCountries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "countries.proto",
}
