// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: cities.proto

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cities_CreateCityByAdmin_FullMethodName          = "/citiesdir.Cities/CreateCityByAdmin"
	Cities_GetCityById_FullMethodName                = "/citiesdir.Cities/GetCityById"
	Cities_SearchCities_FullMethodName               = "/citiesdir.Cities/SearchCities"
	Cities_UpdateCityStatus_FullMethodName           = "/citiesdir.Cities/UpdateCityStatus"
	Cities_UpdateCityName_FullMethodName             = "/citiesdir.Cities/UpdateCityName"
	Cities_UpdateCityStatusBySysAdmin_FullMethodName = "/citiesdir.Cities/UpdateCityStatusBySysAdmin"
)

// CitiesClient is the client API for Cities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitiesClient interface {
	CreateCityByAdmin(ctx context.Context, in *CreateCityByAdminRequestMessage, opts ...grpc.CallOption) (*City, error)
	GetCityById(ctx context.Context, in *GetCityByIdRequestMessage, opts ...grpc.CallOption) (*City, error)
	SearchCities(ctx context.Context, in *SearchCitiesRequestMessage, opts ...grpc.CallOption) (*ListCities, error)
	UpdateCityStatus(ctx context.Context, in *UpdateCityStatusRequestMessage, opts ...grpc.CallOption) (*City, error)
	UpdateCityName(ctx context.Context, in *UpdateCityNameRequestMessage, opts ...grpc.CallOption) (*City, error)
	UpdateCityStatusBySysAdmin(ctx context.Context, in *UpdateCityStatusRequestMessage, opts ...grpc.CallOption) (*City, error)
}

type citiesClient struct {
	cc grpc.ClientConnInterface
}

func NewCitiesClient(cc grpc.ClientConnInterface) CitiesClient {
	return &citiesClient{cc}
}

func (c *citiesClient) CreateCityByAdmin(ctx context.Context, in *CreateCityByAdminRequestMessage, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, Cities_CreateCityByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesClient) GetCityById(ctx context.Context, in *GetCityByIdRequestMessage, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, Cities_GetCityById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesClient) SearchCities(ctx context.Context, in *SearchCitiesRequestMessage, opts ...grpc.CallOption) (*ListCities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCities)
	err := c.cc.Invoke(ctx, Cities_SearchCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesClient) UpdateCityStatus(ctx context.Context, in *UpdateCityStatusRequestMessage, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, Cities_UpdateCityStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesClient) UpdateCityName(ctx context.Context, in *UpdateCityNameRequestMessage, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, Cities_UpdateCityName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesClient) UpdateCityStatusBySysAdmin(ctx context.Context, in *UpdateCityStatusRequestMessage, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, Cities_UpdateCityStatusBySysAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitiesServer is the server API for Cities service.
// All implementations must embed UnimplementedCitiesServer
// for forward compatibility.
type CitiesServer interface {
	CreateCityByAdmin(context.Context, *CreateCityByAdminRequestMessage) (*City, error)
	GetCityById(context.Context, *GetCityByIdRequestMessage) (*City, error)
	SearchCities(context.Context, *SearchCitiesRequestMessage) (*ListCities, error)
	UpdateCityStatus(context.Context, *UpdateCityStatusRequestMessage) (*City, error)
	UpdateCityName(context.Context, *UpdateCityNameRequestMessage) (*City, error)
	UpdateCityStatusBySysAdmin(context.Context, *UpdateCityStatusRequestMessage) (*City, error)
	mustEmbedUnimplementedCitiesServer()
}

// UnimplementedCitiesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCitiesServer struct{}

func (UnimplementedCitiesServer) CreateCityByAdmin(context.Context, *CreateCityByAdminRequestMessage) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityByAdmin not implemented")
}
func (UnimplementedCitiesServer) GetCityById(context.Context, *GetCityByIdRequestMessage) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityById not implemented")
}
func (UnimplementedCitiesServer) SearchCities(context.Context, *SearchCitiesRequestMessage) (*ListCities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCities not implemented")
}
func (UnimplementedCitiesServer) UpdateCityStatus(context.Context, *UpdateCityStatusRequestMessage) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityStatus not implemented")
}
func (UnimplementedCitiesServer) UpdateCityName(context.Context, *UpdateCityNameRequestMessage) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityName not implemented")
}
func (UnimplementedCitiesServer) UpdateCityStatusBySysAdmin(context.Context, *UpdateCityStatusRequestMessage) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityStatusBySysAdmin not implemented")
}
func (UnimplementedCitiesServer) mustEmbedUnimplementedCitiesServer() {}
func (UnimplementedCitiesServer) testEmbeddedByValue()                {}

// UnsafeCitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitiesServer will
// result in compilation errors.
type UnsafeCitiesServer interface {
	mustEmbedUnimplementedCitiesServer()
}

func RegisterCitiesServer(s grpc.ServiceRegistrar, srv CitiesServer) {
	// If the following call pancis, it indicates UnimplementedCitiesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cities_ServiceDesc, srv)
}

func _Cities_CreateCityByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityByAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServer).CreateCityByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cities_CreateCityByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServer).CreateCityByAdmin(ctx, req.(*CreateCityByAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cities_GetCityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityByIdRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServer).GetCityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cities_GetCityById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServer).GetCityById(ctx, req.(*GetCityByIdRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cities_SearchCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCitiesRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServer).SearchCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cities_SearchCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServer).SearchCities(ctx, req.(*SearchCitiesRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cities_UpdateCityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityStatusRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServer).UpdateCityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cities_UpdateCityStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServer).UpdateCityStatus(ctx, req.(*UpdateCityStatusRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cities_UpdateCityName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityNameRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServer).UpdateCityName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cities_UpdateCityName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServer).UpdateCityName(ctx, req.(*UpdateCityNameRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cities_UpdateCityStatusBySysAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityStatusRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServer).UpdateCityStatusBySysAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cities_UpdateCityStatusBySysAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServer).UpdateCityStatusBySysAdmin(ctx, req.(*UpdateCityStatusRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Cities_ServiceDesc is the grpc.ServiceDesc for Cities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citiesdir.Cities",
	HandlerType: (*CitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCityByAdmin",
			Handler:    _Cities_CreateCityByAdmin_Handler,
		},
		{
			MethodName: "GetCityById",
			Handler:    _Cities_GetCityById_Handler,
		},
		{
			MethodName: "SearchCities",
			Handler:    _Cities_SearchCities_Handler,
		},
		{
			MethodName: "UpdateCityStatus",
			Handler:    _Cities_UpdateCityStatus_Handler,
		},
		{
			MethodName: "UpdateCityName",
			Handler:    _Cities_UpdateCityName_Handler,
		},
		{
			MethodName: "UpdateCityStatusBySysAdmin",
			Handler:    _Cities_UpdateCityStatusBySysAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cities.proto",
}
