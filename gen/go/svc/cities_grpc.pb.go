// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: cities.proto

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CitiesService_CreateCity_FullMethodName                 = "/citiesdir.CitiesService/CreateCity"
	CitiesService_UpdateCity_FullMethodName                 = "/citiesdir.CitiesService/UpdateCity"
	CitiesService_DeleteCity_FullMethodName                 = "/citiesdir.CitiesService/DeleteCity"
	CitiesService_GetCityById_FullMethodName                = "/citiesdir.CitiesService/GetCityById"
	CitiesService_GetCountryCities_FullMethodName           = "/citiesdir.CitiesService/GetCountryCities"
	CitiesService_SearchCitiesByName_FullMethodName         = "/citiesdir.CitiesService/SearchCitiesByName"
	CitiesService_SearchCitiesBNameInCountry_FullMethodName = "/citiesdir.CitiesService/SearchCitiesBNameInCountry"
)

// CitiesServiceClient is the client API for CitiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitiesServiceClient interface {
	CreateCity(ctx context.Context, in *CreateCityByAdminRequest, opts ...grpc.CallOption) (*City, error)
	UpdateCity(ctx context.Context, in *UpdateCityByAdminRequest, opts ...grpc.CallOption) (*City, error)
	DeleteCity(ctx context.Context, in *DeleteCityByAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCityById(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*City, error)
	GetCountryCities(ctx context.Context, in *GetCountryCitiesRequest, opts ...grpc.CallOption) (*ListCities, error)
	SearchCitiesByName(ctx context.Context, in *SearchCitiesByNameRequest, opts ...grpc.CallOption) (*ListCities, error)
	SearchCitiesBNameInCountry(ctx context.Context, in *SearchCitiesByNameInCountryRequest, opts ...grpc.CallOption) (*ListCities, error)
}

type citiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCitiesServiceClient(cc grpc.ClientConnInterface) CitiesServiceClient {
	return &citiesServiceClient{cc}
}

func (c *citiesServiceClient) CreateCity(ctx context.Context, in *CreateCityByAdminRequest, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, CitiesService_CreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesServiceClient) UpdateCity(ctx context.Context, in *UpdateCityByAdminRequest, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, CitiesService_UpdateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesServiceClient) DeleteCity(ctx context.Context, in *DeleteCityByAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CitiesService_DeleteCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesServiceClient) GetCityById(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, CitiesService_GetCityById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesServiceClient) GetCountryCities(ctx context.Context, in *GetCountryCitiesRequest, opts ...grpc.CallOption) (*ListCities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCities)
	err := c.cc.Invoke(ctx, CitiesService_GetCountryCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesServiceClient) SearchCitiesByName(ctx context.Context, in *SearchCitiesByNameRequest, opts ...grpc.CallOption) (*ListCities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCities)
	err := c.cc.Invoke(ctx, CitiesService_SearchCitiesByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesServiceClient) SearchCitiesBNameInCountry(ctx context.Context, in *SearchCitiesByNameInCountryRequest, opts ...grpc.CallOption) (*ListCities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCities)
	err := c.cc.Invoke(ctx, CitiesService_SearchCitiesBNameInCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitiesServiceServer is the server API for CitiesService service.
// All implementations must embed UnimplementedCitiesServiceServer
// for forward compatibility.
type CitiesServiceServer interface {
	CreateCity(context.Context, *CreateCityByAdminRequest) (*City, error)
	UpdateCity(context.Context, *UpdateCityByAdminRequest) (*City, error)
	DeleteCity(context.Context, *DeleteCityByAdminRequest) (*emptypb.Empty, error)
	GetCityById(context.Context, *GetCityByIdRequest) (*City, error)
	GetCountryCities(context.Context, *GetCountryCitiesRequest) (*ListCities, error)
	SearchCitiesByName(context.Context, *SearchCitiesByNameRequest) (*ListCities, error)
	SearchCitiesBNameInCountry(context.Context, *SearchCitiesByNameInCountryRequest) (*ListCities, error)
	mustEmbedUnimplementedCitiesServiceServer()
}

// UnimplementedCitiesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCitiesServiceServer struct{}

func (UnimplementedCitiesServiceServer) CreateCity(context.Context, *CreateCityByAdminRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedCitiesServiceServer) UpdateCity(context.Context, *UpdateCityByAdminRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCity not implemented")
}
func (UnimplementedCitiesServiceServer) DeleteCity(context.Context, *DeleteCityByAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedCitiesServiceServer) GetCityById(context.Context, *GetCityByIdRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityById not implemented")
}
func (UnimplementedCitiesServiceServer) GetCountryCities(context.Context, *GetCountryCitiesRequest) (*ListCities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryCities not implemented")
}
func (UnimplementedCitiesServiceServer) SearchCitiesByName(context.Context, *SearchCitiesByNameRequest) (*ListCities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCitiesByName not implemented")
}
func (UnimplementedCitiesServiceServer) SearchCitiesBNameInCountry(context.Context, *SearchCitiesByNameInCountryRequest) (*ListCities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCitiesBNameInCountry not implemented")
}
func (UnimplementedCitiesServiceServer) mustEmbedUnimplementedCitiesServiceServer() {}
func (UnimplementedCitiesServiceServer) testEmbeddedByValue()                       {}

// UnsafeCitiesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitiesServiceServer will
// result in compilation errors.
type UnsafeCitiesServiceServer interface {
	mustEmbedUnimplementedCitiesServiceServer()
}

func RegisterCitiesServiceServer(s grpc.ServiceRegistrar, srv CitiesServiceServer) {
	// If the following call pancis, it indicates UnimplementedCitiesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CitiesService_ServiceDesc, srv)
}

func _CitiesService_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServiceServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesService_CreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServiceServer).CreateCity(ctx, req.(*CreateCityByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesService_UpdateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServiceServer).UpdateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesService_UpdateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServiceServer).UpdateCity(ctx, req.(*UpdateCityByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesService_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServiceServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesService_DeleteCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServiceServer).DeleteCity(ctx, req.(*DeleteCityByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesService_GetCityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServiceServer).GetCityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesService_GetCityById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServiceServer).GetCityById(ctx, req.(*GetCityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesService_GetCountryCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServiceServer).GetCountryCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesService_GetCountryCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServiceServer).GetCountryCities(ctx, req.(*GetCountryCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesService_SearchCitiesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCitiesByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServiceServer).SearchCitiesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesService_SearchCitiesByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServiceServer).SearchCitiesByName(ctx, req.(*SearchCitiesByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesService_SearchCitiesBNameInCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCitiesByNameInCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesServiceServer).SearchCitiesBNameInCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesService_SearchCitiesBNameInCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesServiceServer).SearchCitiesBNameInCountry(ctx, req.(*SearchCitiesByNameInCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CitiesService_ServiceDesc is the grpc.ServiceDesc for CitiesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CitiesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citiesdir.CitiesService",
	HandlerType: (*CitiesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCity",
			Handler:    _CitiesService_CreateCity_Handler,
		},
		{
			MethodName: "UpdateCity",
			Handler:    _CitiesService_UpdateCity_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _CitiesService_DeleteCity_Handler,
		},
		{
			MethodName: "GetCityById",
			Handler:    _CitiesService_GetCityById_Handler,
		},
		{
			MethodName: "GetCountryCities",
			Handler:    _CitiesService_GetCountryCities_Handler,
		},
		{
			MethodName: "SearchCitiesByName",
			Handler:    _CitiesService_SearchCitiesByName_Handler,
		},
		{
			MethodName: "SearchCitiesBNameInCountry",
			Handler:    _CitiesService_SearchCitiesBNameInCountry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cities.proto",
}
