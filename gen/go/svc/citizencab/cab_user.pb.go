// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: svc/citizencab/cab_user.proto

package citizencab

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// REQUESTS
type CreateProfilrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Pseudonym   *string `protobuf:"bytes,2,opt,name=pseudonym,proto3,oneof" json:"pseudonym,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Avatar      *string `protobuf:"bytes,4,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	Sex         *string `protobuf:"bytes,5,opt,name=sex,proto3,oneof" json:"sex,omitempty"`
	BirthDate   *string `protobuf:"bytes,6,opt,name=birth_date,json=birthDate,proto3,oneof" json:"birth_date,omitempty"` // Format: YYYY-MM-DD
}

func (x *CreateProfilrRequest) Reset() {
	*x = CreateProfilrRequest{}
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProfilrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfilrRequest) ProtoMessage() {}

func (x *CreateProfilrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfilrRequest.ProtoReflect.Descriptor instead.
func (*CreateProfilrRequest) Descriptor() ([]byte, []int) {
	return file_svc_citizencab_cab_user_proto_rawDescGZIP(), []int{0}
}

func (x *CreateProfilrRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateProfilrRequest) GetPseudonym() string {
	if x != nil && x.Pseudonym != nil {
		return *x.Pseudonym
	}
	return ""
}

func (x *CreateProfilrRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateProfilrRequest) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *CreateProfilrRequest) GetSex() string {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return ""
}

func (x *CreateProfilrRequest) GetBirthDate() string {
	if x != nil && x.BirthDate != nil {
		return *x.BirthDate
	}
	return ""
}

type GetProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*GetProfileRequest_UserId
	//	*GetProfileRequest_Username
	Identifier isGetProfileRequest_Identifier `protobuf_oneof:"identifier"`
}

func (x *GetProfileRequest) Reset() {
	*x = GetProfileRequest{}
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileRequest) ProtoMessage() {}

func (x *GetProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileRequest.ProtoReflect.Descriptor instead.
func (*GetProfileRequest) Descriptor() ([]byte, []int) {
	return file_svc_citizencab_cab_user_proto_rawDescGZIP(), []int{1}
}

func (m *GetProfileRequest) GetIdentifier() isGetProfileRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetProfileRequest) GetUserId() string {
	if x, ok := x.GetIdentifier().(*GetProfileRequest_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *GetProfileRequest) GetUsername() string {
	if x, ok := x.GetIdentifier().(*GetProfileRequest_Username); ok {
		return x.Username
	}
	return ""
}

type isGetProfileRequest_Identifier interface {
	isGetProfileRequest_Identifier()
}

type GetProfileRequest_UserId struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof"`
}

type GetProfileRequest_Username struct {
	Username string `protobuf:"bytes,2,opt,name=username,proto3,oneof"`
}

func (*GetProfileRequest_UserId) isGetProfileRequest_Identifier() {}

func (*GetProfileRequest_Username) isGetProfileRequest_Identifier() {}

type SearchProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SearchProfileRequest) Reset() {
	*x = SearchProfileRequest{}
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProfileRequest) ProtoMessage() {}

func (x *SearchProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProfileRequest.ProtoReflect.Descriptor instead.
func (*SearchProfileRequest) Descriptor() ([]byte, []int) {
	return file_svc_citizencab_cab_user_proto_rawDescGZIP(), []int{2}
}

func (x *SearchProfileRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchProfileRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchProfileRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type UpdateOwnProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pseudonym   *string `protobuf:"bytes,1,opt,name=pseudonym,proto3,oneof" json:"pseudonym,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Avatar      *string `protobuf:"bytes,3,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	Sex         *string `protobuf:"bytes,4,opt,name=sex,proto3,oneof" json:"sex,omitempty"`
	BirthDate   *string `protobuf:"bytes,5,opt,name=birth_date,json=birthDate,proto3,oneof" json:"birth_date,omitempty"` // Format: YYYY-MM-DD
}

func (x *UpdateOwnProfileRequest) Reset() {
	*x = UpdateOwnProfileRequest{}
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOwnProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOwnProfileRequest) ProtoMessage() {}

func (x *UpdateOwnProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOwnProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateOwnProfileRequest) Descriptor() ([]byte, []int) {
	return file_svc_citizencab_cab_user_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateOwnProfileRequest) GetPseudonym() string {
	if x != nil && x.Pseudonym != nil {
		return *x.Pseudonym
	}
	return ""
}

func (x *UpdateOwnProfileRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateOwnProfileRequest) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *UpdateOwnProfileRequest) GetSex() string {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return ""
}

func (x *UpdateOwnProfileRequest) GetBirthDate() string {
	if x != nil && x.BirthDate != nil {
		return *x.BirthDate
	}
	return ""
}

type UpdateOwnUsernameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UpdateOwnUsernameRequest) Reset() {
	*x = UpdateOwnUsernameRequest{}
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOwnUsernameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOwnUsernameRequest) ProtoMessage() {}

func (x *UpdateOwnUsernameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_citizencab_cab_user_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOwnUsernameRequest.ProtoReflect.Descriptor instead.
func (*UpdateOwnUsernameRequest) Descriptor() ([]byte, []int) {
	return file_svc_citizencab_cab_user_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateOwnUsernameRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

var File_svc_citizencab_cab_user_proto protoreflect.FileDescriptor

var file_svc_citizencab_cab_user_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62,
	0x2f, 0x63, 0x61, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62, 0x1a, 0x20, 0x73, 0x76, 0x63,
	0x2f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62, 0x2f, 0x63, 0x61, 0x62, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x02, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x73, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73,
	0x65, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x5a, 0x0a,
	0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e,
	0x79, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x73, 0x65, 0x75,
	0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x73, 0x65, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x73, 0x65, 0x75,
	0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x65, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0xf6, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x49, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63,
	0x61, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e,
	0x63, 0x61, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63,
	0x61, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23,
	0x2e, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x2e,
	0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2d, 0x6c, 0x61,
	0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x69, 0x74, 0x69, 0x7a,
	0x65, 0x6e, 0x63, 0x61, 0x62, 0x3b, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x63, 0x61, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_citizencab_cab_user_proto_rawDescOnce sync.Once
	file_svc_citizencab_cab_user_proto_rawDescData = file_svc_citizencab_cab_user_proto_rawDesc
)

func file_svc_citizencab_cab_user_proto_rawDescGZIP() []byte {
	file_svc_citizencab_cab_user_proto_rawDescOnce.Do(func() {
		file_svc_citizencab_cab_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_citizencab_cab_user_proto_rawDescData)
	})
	return file_svc_citizencab_cab_user_proto_rawDescData
}

var file_svc_citizencab_cab_user_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_svc_citizencab_cab_user_proto_goTypes = []any{
	(*CreateProfilrRequest)(nil),     // 0: citizencab.CreateProfilrRequest
	(*GetProfileRequest)(nil),        // 1: citizencab.GetProfileRequest
	(*SearchProfileRequest)(nil),     // 2: citizencab.SearchProfileRequest
	(*UpdateOwnProfileRequest)(nil),  // 3: citizencab.UpdateOwnProfileRequest
	(*UpdateOwnUsernameRequest)(nil), // 4: citizencab.UpdateOwnUsernameRequest
	(*emptypb.Empty)(nil),            // 5: google.protobuf.Empty
	(*Profile)(nil),                  // 6: citizencab.Profile
}
var file_svc_citizencab_cab_user_proto_depIdxs = []int32{
	0, // 0: citizencab.UserService.CreateOwnProfile:input_type -> citizencab.CreateProfilrRequest
	5, // 1: citizencab.UserService.GetOwnProfile:input_type -> google.protobuf.Empty
	1, // 2: citizencab.UserService.GetProfile:input_type -> citizencab.GetProfileRequest
	3, // 3: citizencab.UserService.UpdateOwnProfile:input_type -> citizencab.UpdateOwnProfileRequest
	4, // 4: citizencab.UserService.UpdateOwnUsername:input_type -> citizencab.UpdateOwnUsernameRequest
	6, // 5: citizencab.UserService.CreateOwnProfile:output_type -> citizencab.Profile
	6, // 6: citizencab.UserService.GetOwnProfile:output_type -> citizencab.Profile
	6, // 7: citizencab.UserService.GetProfile:output_type -> citizencab.Profile
	6, // 8: citizencab.UserService.UpdateOwnProfile:output_type -> citizencab.Profile
	6, // 9: citizencab.UserService.UpdateOwnUsername:output_type -> citizencab.Profile
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_svc_citizencab_cab_user_proto_init() }
func file_svc_citizencab_cab_user_proto_init() {
	if File_svc_citizencab_cab_user_proto != nil {
		return
	}
	file_svc_citizencab_cab_structs_proto_init()
	file_svc_citizencab_cab_user_proto_msgTypes[0].OneofWrappers = []any{}
	file_svc_citizencab_cab_user_proto_msgTypes[1].OneofWrappers = []any{
		(*GetProfileRequest_UserId)(nil),
		(*GetProfileRequest_Username)(nil),
	}
	file_svc_citizencab_cab_user_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_citizencab_cab_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_citizencab_cab_user_proto_goTypes,
		DependencyIndexes: file_svc_citizencab_cab_user_proto_depIdxs,
		MessageInfos:      file_svc_citizencab_cab_user_proto_msgTypes,
	}.Build()
	File_svc_citizencab_cab_user_proto = out.File
	file_svc_citizencab_cab_user_proto_rawDesc = nil
	file_svc_citizencab_cab_user_proto_goTypes = nil
	file_svc_citizencab_cab_user_proto_depIdxs = nil
}
