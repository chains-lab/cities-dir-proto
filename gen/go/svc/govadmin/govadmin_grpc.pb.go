// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: svc/govadmin/govadmin.proto

package govadmin

import (
	context "context"
	gov "github.com/chains-lab/cities-dir-proto/gen/go/svc/gov"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GovAdminService_CreateCityGov_FullMethodName = "/govadmin.GovAdminService/CreateCityGov"
	GovAdminService_UpdateCityGov_FullMethodName = "/govadmin.GovAdminService/UpdateCityGov"
	GovAdminService_DeleteCityGov_FullMethodName = "/govadmin.GovAdminService/DeleteCityGov"
)

// GovAdminServiceClient is the client API for GovAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GovAdminServiceClient interface {
	CreateCityGov(ctx context.Context, in *CreateCityGovRequest, opts ...grpc.CallOption) (*gov.CityGov, error)
	UpdateCityGov(ctx context.Context, in *UpdateCityGovRequest, opts ...grpc.CallOption) (*gov.CityGov, error)
	DeleteCityGov(ctx context.Context, in *DeleteCityGovRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type govAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGovAdminServiceClient(cc grpc.ClientConnInterface) GovAdminServiceClient {
	return &govAdminServiceClient{cc}
}

func (c *govAdminServiceClient) CreateCityGov(ctx context.Context, in *CreateCityGovRequest, opts ...grpc.CallOption) (*gov.CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gov.CityGov)
	err := c.cc.Invoke(ctx, GovAdminService_CreateCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *govAdminServiceClient) UpdateCityGov(ctx context.Context, in *UpdateCityGovRequest, opts ...grpc.CallOption) (*gov.CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(gov.CityGov)
	err := c.cc.Invoke(ctx, GovAdminService_UpdateCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *govAdminServiceClient) DeleteCityGov(ctx context.Context, in *DeleteCityGovRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GovAdminService_DeleteCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GovAdminServiceServer is the server API for GovAdminService service.
// All implementations must embed UnimplementedGovAdminServiceServer
// for forward compatibility.
type GovAdminServiceServer interface {
	CreateCityGov(context.Context, *CreateCityGovRequest) (*gov.CityGov, error)
	UpdateCityGov(context.Context, *UpdateCityGovRequest) (*gov.CityGov, error)
	DeleteCityGov(context.Context, *DeleteCityGovRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGovAdminServiceServer()
}

// UnimplementedGovAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGovAdminServiceServer struct{}

func (UnimplementedGovAdminServiceServer) CreateCityGov(context.Context, *CreateCityGovRequest) (*gov.CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityGov not implemented")
}
func (UnimplementedGovAdminServiceServer) UpdateCityGov(context.Context, *UpdateCityGovRequest) (*gov.CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityGov not implemented")
}
func (UnimplementedGovAdminServiceServer) DeleteCityGov(context.Context, *DeleteCityGovRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityGov not implemented")
}
func (UnimplementedGovAdminServiceServer) mustEmbedUnimplementedGovAdminServiceServer() {}
func (UnimplementedGovAdminServiceServer) testEmbeddedByValue()                         {}

// UnsafeGovAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GovAdminServiceServer will
// result in compilation errors.
type UnsafeGovAdminServiceServer interface {
	mustEmbedUnimplementedGovAdminServiceServer()
}

func RegisterGovAdminServiceServer(s grpc.ServiceRegistrar, srv GovAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedGovAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GovAdminService_ServiceDesc, srv)
}

func _GovAdminService_CreateCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovAdminServiceServer).CreateCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovAdminService_CreateCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovAdminServiceServer).CreateCityGov(ctx, req.(*CreateCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovAdminService_UpdateCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovAdminServiceServer).UpdateCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovAdminService_UpdateCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovAdminServiceServer).UpdateCityGov(ctx, req.(*UpdateCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovAdminService_DeleteCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovAdminServiceServer).DeleteCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovAdminService_DeleteCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovAdminServiceServer).DeleteCityGov(ctx, req.(*DeleteCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GovAdminService_ServiceDesc is the grpc.ServiceDesc for GovAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GovAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "govadmin.GovAdminService",
	HandlerType: (*GovAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCityGov",
			Handler:    _GovAdminService_CreateCityGov_Handler,
		},
		{
			MethodName: "UpdateCityGov",
			Handler:    _GovAdminService_UpdateCityGov_Handler,
		},
		{
			MethodName: "DeleteCityGov",
			Handler:    _GovAdminService_DeleteCityGov_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/govadmin/govadmin.proto",
}
