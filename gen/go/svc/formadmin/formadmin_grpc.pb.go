// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: svc/formadmin/formadmin.proto

package formadmin

import (
	context "context"
	form "github.com/chains-lab/cities-dir-proto/gen/go/svc/form"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FormAdminService_AcceptFormToCreateCity_FullMethodName  = "/formadmin.FormAdminService/AcceptFormToCreateCity"
	FormAdminService_DeclineFormToCreateCity_FullMethodName = "/formadmin.FormAdminService/DeclineFormToCreateCity"
)

// FormAdminServiceClient is the client API for FormAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormAdminServiceClient interface {
	AcceptFormToCreateCity(ctx context.Context, in *AcceptFormToCreateCityRequest, opts ...grpc.CallOption) (*form.FormToCreateCity, error)
	DeclineFormToCreateCity(ctx context.Context, in *DeclineFormToCreateCityRequest, opts ...grpc.CallOption) (*form.FormToCreateCity, error)
}

type formAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFormAdminServiceClient(cc grpc.ClientConnInterface) FormAdminServiceClient {
	return &formAdminServiceClient{cc}
}

func (c *formAdminServiceClient) AcceptFormToCreateCity(ctx context.Context, in *AcceptFormToCreateCityRequest, opts ...grpc.CallOption) (*form.FormToCreateCity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(form.FormToCreateCity)
	err := c.cc.Invoke(ctx, FormAdminService_AcceptFormToCreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *formAdminServiceClient) DeclineFormToCreateCity(ctx context.Context, in *DeclineFormToCreateCityRequest, opts ...grpc.CallOption) (*form.FormToCreateCity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(form.FormToCreateCity)
	err := c.cc.Invoke(ctx, FormAdminService_DeclineFormToCreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormAdminServiceServer is the server API for FormAdminService service.
// All implementations must embed UnimplementedFormAdminServiceServer
// for forward compatibility.
type FormAdminServiceServer interface {
	AcceptFormToCreateCity(context.Context, *AcceptFormToCreateCityRequest) (*form.FormToCreateCity, error)
	DeclineFormToCreateCity(context.Context, *DeclineFormToCreateCityRequest) (*form.FormToCreateCity, error)
	mustEmbedUnimplementedFormAdminServiceServer()
}

// UnimplementedFormAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFormAdminServiceServer struct{}

func (UnimplementedFormAdminServiceServer) AcceptFormToCreateCity(context.Context, *AcceptFormToCreateCityRequest) (*form.FormToCreateCity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFormToCreateCity not implemented")
}
func (UnimplementedFormAdminServiceServer) DeclineFormToCreateCity(context.Context, *DeclineFormToCreateCityRequest) (*form.FormToCreateCity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineFormToCreateCity not implemented")
}
func (UnimplementedFormAdminServiceServer) mustEmbedUnimplementedFormAdminServiceServer() {}
func (UnimplementedFormAdminServiceServer) testEmbeddedByValue()                          {}

// UnsafeFormAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormAdminServiceServer will
// result in compilation errors.
type UnsafeFormAdminServiceServer interface {
	mustEmbedUnimplementedFormAdminServiceServer()
}

func RegisterFormAdminServiceServer(s grpc.ServiceRegistrar, srv FormAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedFormAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FormAdminService_ServiceDesc, srv)
}

func _FormAdminService_AcceptFormToCreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptFormToCreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormAdminServiceServer).AcceptFormToCreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormAdminService_AcceptFormToCreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormAdminServiceServer).AcceptFormToCreateCity(ctx, req.(*AcceptFormToCreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FormAdminService_DeclineFormToCreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineFormToCreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormAdminServiceServer).DeclineFormToCreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FormAdminService_DeclineFormToCreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormAdminServiceServer).DeclineFormToCreateCity(ctx, req.(*DeclineFormToCreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FormAdminService_ServiceDesc is the grpc.ServiceDesc for FormAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "formadmin.FormAdminService",
	HandlerType: (*FormAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptFormToCreateCity",
			Handler:    _FormAdminService_AcceptFormToCreateCity_Handler,
		},
		{
			MethodName: "DeclineFormToCreateCity",
			Handler:    _FormAdminService_DeclineFormToCreateCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/formadmin/formadmin.proto",
}
