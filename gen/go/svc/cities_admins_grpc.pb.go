// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: cities_admins.proto

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CitiesAdmins_CreateCityOwnerAdmin_FullMethodName  = "/citiesdir.CitiesAdmins/CreateCityOwnerAdmin"
	CitiesAdmins_TransferCityOwnership_FullMethodName = "/citiesdir.CitiesAdmins/TransferCityOwnership"
	CitiesAdmins_CreateCityAdmin_FullMethodName       = "/citiesdir.CitiesAdmins/CreateCityAdmin"
	CitiesAdmins_UpdateCityAdmin_FullMethodName       = "/citiesdir.CitiesAdmins/UpdateCityAdmin"
	CitiesAdmins_DeleteCityAdmin_FullMethodName       = "/citiesdir.CitiesAdmins/DeleteCityAdmin"
	CitiesAdmins_RefuseCityAdmin_FullMethodName       = "/citiesdir.CitiesAdmins/RefuseCityAdmin"
	CitiesAdmins_GetCityAdmin_FullMethodName          = "/citiesdir.CitiesAdmins/GetCityAdmin"
	CitiesAdmins_ListCityAdminsForCity_FullMethodName = "/citiesdir.CitiesAdmins/ListCityAdminsForCity"
)

// CitiesAdminsClient is the client API for CitiesAdmins service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitiesAdminsClient interface {
	// System admin can use this method to create a city admin for any city.
	CreateCityOwnerAdmin(ctx context.Context, in *CreateCityOwnerAdminRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error)
	TransferCityOwnership(ctx context.Context, in *TransferCityOwnershipRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error)
	CreateCityAdmin(ctx context.Context, in *CreateCityAdminRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error)
	UpdateCityAdmin(ctx context.Context, in *UpdateCityAdminRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error)
	DeleteCityAdmin(ctx context.Context, in *DeleteCityAdminRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefuseCityAdmin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCityAdmin(ctx context.Context, in *GetCityAdminRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error)
	ListCityAdminsForCity(ctx context.Context, in *ListCityAdminsForCityRequestMessage, opts ...grpc.CallOption) (*ListCityAdmins, error)
}

type citiesAdminsClient struct {
	cc grpc.ClientConnInterface
}

func NewCitiesAdminsClient(cc grpc.ClientConnInterface) CitiesAdminsClient {
	return &citiesAdminsClient{cc}
}

func (c *citiesAdminsClient) CreateCityOwnerAdmin(ctx context.Context, in *CreateCityOwnerAdminRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CitiesAdmins_CreateCityOwnerAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesAdminsClient) TransferCityOwnership(ctx context.Context, in *TransferCityOwnershipRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CitiesAdmins_TransferCityOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesAdminsClient) CreateCityAdmin(ctx context.Context, in *CreateCityAdminRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CitiesAdmins_CreateCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesAdminsClient) UpdateCityAdmin(ctx context.Context, in *UpdateCityAdminRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CitiesAdmins_UpdateCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesAdminsClient) DeleteCityAdmin(ctx context.Context, in *DeleteCityAdminRequestMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CitiesAdmins_DeleteCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesAdminsClient) RefuseCityAdmin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CitiesAdmins_RefuseCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesAdminsClient) GetCityAdmin(ctx context.Context, in *GetCityAdminRequestMessage, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CitiesAdmins_GetCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citiesAdminsClient) ListCityAdminsForCity(ctx context.Context, in *ListCityAdminsForCityRequestMessage, opts ...grpc.CallOption) (*ListCityAdmins, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCityAdmins)
	err := c.cc.Invoke(ctx, CitiesAdmins_ListCityAdminsForCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitiesAdminsServer is the server API for CitiesAdmins service.
// All implementations must embed UnimplementedCitiesAdminsServer
// for forward compatibility.
type CitiesAdminsServer interface {
	// System admin can use this method to create a city admin for any city.
	CreateCityOwnerAdmin(context.Context, *CreateCityOwnerAdminRequestMessage) (*CityAdmin, error)
	TransferCityOwnership(context.Context, *TransferCityOwnershipRequestMessage) (*CityAdmin, error)
	CreateCityAdmin(context.Context, *CreateCityAdminRequestMessage) (*CityAdmin, error)
	UpdateCityAdmin(context.Context, *UpdateCityAdminRequestMessage) (*CityAdmin, error)
	DeleteCityAdmin(context.Context, *DeleteCityAdminRequestMessage) (*emptypb.Empty, error)
	RefuseCityAdmin(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetCityAdmin(context.Context, *GetCityAdminRequestMessage) (*CityAdmin, error)
	ListCityAdminsForCity(context.Context, *ListCityAdminsForCityRequestMessage) (*ListCityAdmins, error)
	mustEmbedUnimplementedCitiesAdminsServer()
}

// UnimplementedCitiesAdminsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCitiesAdminsServer struct{}

func (UnimplementedCitiesAdminsServer) CreateCityOwnerAdmin(context.Context, *CreateCityOwnerAdminRequestMessage) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityOwnerAdmin not implemented")
}
func (UnimplementedCitiesAdminsServer) TransferCityOwnership(context.Context, *TransferCityOwnershipRequestMessage) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCityOwnership not implemented")
}
func (UnimplementedCitiesAdminsServer) CreateCityAdmin(context.Context, *CreateCityAdminRequestMessage) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityAdmin not implemented")
}
func (UnimplementedCitiesAdminsServer) UpdateCityAdmin(context.Context, *UpdateCityAdminRequestMessage) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityAdmin not implemented")
}
func (UnimplementedCitiesAdminsServer) DeleteCityAdmin(context.Context, *DeleteCityAdminRequestMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityAdmin not implemented")
}
func (UnimplementedCitiesAdminsServer) RefuseCityAdmin(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseCityAdmin not implemented")
}
func (UnimplementedCitiesAdminsServer) GetCityAdmin(context.Context, *GetCityAdminRequestMessage) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityAdmin not implemented")
}
func (UnimplementedCitiesAdminsServer) ListCityAdminsForCity(context.Context, *ListCityAdminsForCityRequestMessage) (*ListCityAdmins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCityAdminsForCity not implemented")
}
func (UnimplementedCitiesAdminsServer) mustEmbedUnimplementedCitiesAdminsServer() {}
func (UnimplementedCitiesAdminsServer) testEmbeddedByValue()                      {}

// UnsafeCitiesAdminsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitiesAdminsServer will
// result in compilation errors.
type UnsafeCitiesAdminsServer interface {
	mustEmbedUnimplementedCitiesAdminsServer()
}

func RegisterCitiesAdminsServer(s grpc.ServiceRegistrar, srv CitiesAdminsServer) {
	// If the following call pancis, it indicates UnimplementedCitiesAdminsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CitiesAdmins_ServiceDesc, srv)
}

func _CitiesAdmins_CreateCityOwnerAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityOwnerAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesAdminsServer).CreateCityOwnerAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesAdmins_CreateCityOwnerAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesAdminsServer).CreateCityOwnerAdmin(ctx, req.(*CreateCityOwnerAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesAdmins_TransferCityOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCityOwnershipRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesAdminsServer).TransferCityOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesAdmins_TransferCityOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesAdminsServer).TransferCityOwnership(ctx, req.(*TransferCityOwnershipRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesAdmins_CreateCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesAdminsServer).CreateCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesAdmins_CreateCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesAdminsServer).CreateCityAdmin(ctx, req.(*CreateCityAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesAdmins_UpdateCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesAdminsServer).UpdateCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesAdmins_UpdateCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesAdminsServer).UpdateCityAdmin(ctx, req.(*UpdateCityAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesAdmins_DeleteCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesAdminsServer).DeleteCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesAdmins_DeleteCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesAdminsServer).DeleteCityAdmin(ctx, req.(*DeleteCityAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesAdmins_RefuseCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesAdminsServer).RefuseCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesAdmins_RefuseCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesAdminsServer).RefuseCityAdmin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesAdmins_GetCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityAdminRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesAdminsServer).GetCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesAdmins_GetCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesAdminsServer).GetCityAdmin(ctx, req.(*GetCityAdminRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitiesAdmins_ListCityAdminsForCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCityAdminsForCityRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitiesAdminsServer).ListCityAdminsForCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitiesAdmins_ListCityAdminsForCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitiesAdminsServer).ListCityAdminsForCity(ctx, req.(*ListCityAdminsForCityRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// CitiesAdmins_ServiceDesc is the grpc.ServiceDesc for CitiesAdmins service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CitiesAdmins_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citiesdir.CitiesAdmins",
	HandlerType: (*CitiesAdminsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCityOwnerAdmin",
			Handler:    _CitiesAdmins_CreateCityOwnerAdmin_Handler,
		},
		{
			MethodName: "TransferCityOwnership",
			Handler:    _CitiesAdmins_TransferCityOwnership_Handler,
		},
		{
			MethodName: "CreateCityAdmin",
			Handler:    _CitiesAdmins_CreateCityAdmin_Handler,
		},
		{
			MethodName: "UpdateCityAdmin",
			Handler:    _CitiesAdmins_UpdateCityAdmin_Handler,
		},
		{
			MethodName: "DeleteCityAdmin",
			Handler:    _CitiesAdmins_DeleteCityAdmin_Handler,
		},
		{
			MethodName: "RefuseCityAdmin",
			Handler:    _CitiesAdmins_RefuseCityAdmin_Handler,
		},
		{
			MethodName: "GetCityAdmin",
			Handler:    _CitiesAdmins_GetCityAdmin_Handler,
		},
		{
			MethodName: "ListCityAdminsForCity",
			Handler:    _CitiesAdmins_ListCityAdminsForCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cities_admins.proto",
}
