// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: cities_admins.proto

package svc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CityAdminService_CreateCityOwner_FullMethodName   = "/citiesdir.CityAdminService/CreateCityOwner"
	CityAdminService_TransferOwnership_FullMethodName = "/citiesdir.CityAdminService/TransferOwnership"
	CityAdminService_CreateAdmin_FullMethodName       = "/citiesdir.CityAdminService/CreateAdmin"
	CityAdminService_UpdateAdmin_FullMethodName       = "/citiesdir.CityAdminService/UpdateAdmin"
	CityAdminService_DeleteAdmin_FullMethodName       = "/citiesdir.CityAdminService/DeleteAdmin"
	CityAdminService_ResignAdmin_FullMethodName       = "/citiesdir.CityAdminService/ResignAdmin"
	CityAdminService_GetAdmin_FullMethodName          = "/citiesdir.CityAdminService/GetAdmin"
	CityAdminService_ListAdmins_FullMethodName        = "/citiesdir.CityAdminService/ListAdmins"
)

// CityAdminServiceClient is the client API for CityAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityAdminServiceClient interface {
	CreateCityOwner(ctx context.Context, in *CreateCityOwnerRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResignAdmin(ctx context.Context, in *ResignAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	ListAdmins(ctx context.Context, in *ListAdminsRequest, opts ...grpc.CallOption) (*ListCitiesAdmins, error)
}

type cityAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCityAdminServiceClient(cc grpc.ClientConnInterface) CityAdminServiceClient {
	return &cityAdminServiceClient{cc}
}

func (c *cityAdminServiceClient) CreateCityOwner(ctx context.Context, in *CreateCityOwnerRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_CreateCityOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_TransferOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_CreateAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_UpdateAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityAdminService_DeleteAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) ResignAdmin(ctx context.Context, in *ResignAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityAdminService_ResignAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_GetAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) ListAdmins(ctx context.Context, in *ListAdminsRequest, opts ...grpc.CallOption) (*ListCitiesAdmins, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCitiesAdmins)
	err := c.cc.Invoke(ctx, CityAdminService_ListAdmins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityAdminServiceServer is the server API for CityAdminService service.
// All implementations must embed UnimplementedCityAdminServiceServer
// for forward compatibility.
type CityAdminServiceServer interface {
	CreateCityOwner(context.Context, *CreateCityOwnerRequest) (*CityAdmin, error)
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*CityAdmin, error)
	CreateAdmin(context.Context, *CreateAdminRequest) (*CityAdmin, error)
	UpdateAdmin(context.Context, *UpdateAdminRequest) (*CityAdmin, error)
	DeleteAdmin(context.Context, *DeleteAdminRequest) (*emptypb.Empty, error)
	ResignAdmin(context.Context, *ResignAdminRequest) (*emptypb.Empty, error)
	GetAdmin(context.Context, *GetAdminRequest) (*CityAdmin, error)
	ListAdmins(context.Context, *ListAdminsRequest) (*ListCitiesAdmins, error)
	mustEmbedUnimplementedCityAdminServiceServer()
}

// UnimplementedCityAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCityAdminServiceServer struct{}

func (UnimplementedCityAdminServiceServer) CreateCityOwner(context.Context, *CreateCityOwnerRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityOwner not implemented")
}
func (UnimplementedCityAdminServiceServer) TransferOwnership(context.Context, *TransferOwnershipRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedCityAdminServiceServer) CreateAdmin(context.Context, *CreateAdminRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (UnimplementedCityAdminServiceServer) UpdateAdmin(context.Context, *UpdateAdminRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (UnimplementedCityAdminServiceServer) DeleteAdmin(context.Context, *DeleteAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (UnimplementedCityAdminServiceServer) ResignAdmin(context.Context, *ResignAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResignAdmin not implemented")
}
func (UnimplementedCityAdminServiceServer) GetAdmin(context.Context, *GetAdminRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (UnimplementedCityAdminServiceServer) ListAdmins(context.Context, *ListAdminsRequest) (*ListCitiesAdmins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmins not implemented")
}
func (UnimplementedCityAdminServiceServer) mustEmbedUnimplementedCityAdminServiceServer() {}
func (UnimplementedCityAdminServiceServer) testEmbeddedByValue()                          {}

// UnsafeCityAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityAdminServiceServer will
// result in compilation errors.
type UnsafeCityAdminServiceServer interface {
	mustEmbedUnimplementedCityAdminServiceServer()
}

func RegisterCityAdminServiceServer(s grpc.ServiceRegistrar, srv CityAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedCityAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CityAdminService_ServiceDesc, srv)
}

func _CityAdminService_CreateCityOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).CreateCityOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_CreateCityOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).CreateCityOwner(ctx, req.(*CreateCityOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_CreateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).CreateAdmin(ctx, req.(*CreateAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_UpdateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).UpdateAdmin(ctx, req.(*UpdateAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_DeleteAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).DeleteAdmin(ctx, req.(*DeleteAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_ResignAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResignAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).ResignAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_ResignAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).ResignAdmin(ctx, req.(*ResignAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_GetAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).GetAdmin(ctx, req.(*GetAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_ListAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).ListAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_ListAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).ListAdmins(ctx, req.(*ListAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CityAdminService_ServiceDesc is the grpc.ServiceDesc for CityAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CityAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citiesdir.CityAdminService",
	HandlerType: (*CityAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCityOwner",
			Handler:    _CityAdminService_CreateCityOwner_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _CityAdminService_TransferOwnership_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _CityAdminService_CreateAdmin_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _CityAdminService_UpdateAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _CityAdminService_DeleteAdmin_Handler,
		},
		{
			MethodName: "ResignAdmin",
			Handler:    _CityAdminService_ResignAdmin_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _CityAdminService_GetAdmin_Handler,
		},
		{
			MethodName: "ListAdmins",
			Handler:    _CityAdminService_ListAdmins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cities_admins.proto",
}
