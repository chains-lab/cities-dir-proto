// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: svc/electorcab/cab_admin.proto

package electorcab

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_GetCabinetByAdmin_FullMethodName      = "/elector.AdminService/GetCabinetByAdmin"
	AdminService_GetProfileByAdmin_FullMethodName      = "/elector.AdminService/GetProfileByAdmin"
	AdminService_UpdateProfileByAdmin_FullMethodName   = "/elector.AdminService/UpdateProfileByAdmin"
	AdminService_GetBiographyByAdmin_FullMethodName    = "/elector.AdminService/GetBiographyByAdmin"
	AdminService_UpdateBiographyByAdmin_FullMethodName = "/elector.AdminService/UpdateBiographyByAdmin"
	AdminService_GetJobResumeByAdmin_FullMethodName    = "/elector.AdminService/GetJobResumeByAdmin"
	AdminService_UpdateJobResumeByAdmin_FullMethodName = "/elector.AdminService/UpdateJobResumeByAdmin"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	GetCabinetByAdmin(ctx context.Context, in *GetCabinetByAdminRequestRequest, opts ...grpc.CallOption) (*Cabinet, error)
	GetProfileByAdmin(ctx context.Context, in *GetProfileByAdminRequestRequest, opts ...grpc.CallOption) (*Profile, error)
	UpdateProfileByAdmin(ctx context.Context, in *UpdateProfileByAdminRequestRequest, opts ...grpc.CallOption) (*Profile, error)
	GetBiographyByAdmin(ctx context.Context, in *GetBiographyByAdminRequestRequest, opts ...grpc.CallOption) (*Biography, error)
	UpdateBiographyByAdmin(ctx context.Context, in *UpdateBiographyByAdminRequestRequest, opts ...grpc.CallOption) (*Biography, error)
	GetJobResumeByAdmin(ctx context.Context, in *GetJobResumeByAdminRequestRequest, opts ...grpc.CallOption) (*JobResume, error)
	UpdateJobResumeByAdmin(ctx context.Context, in *UpdateJobResumeByAdminRequestRequest, opts ...grpc.CallOption) (*JobResume, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) GetCabinetByAdmin(ctx context.Context, in *GetCabinetByAdminRequestRequest, opts ...grpc.CallOption) (*Cabinet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cabinet)
	err := c.cc.Invoke(ctx, AdminService_GetCabinetByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProfileByAdmin(ctx context.Context, in *GetProfileByAdminRequestRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, AdminService_GetProfileByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateProfileByAdmin(ctx context.Context, in *UpdateProfileByAdminRequestRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, AdminService_UpdateProfileByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetBiographyByAdmin(ctx context.Context, in *GetBiographyByAdminRequestRequest, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, AdminService_GetBiographyByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateBiographyByAdmin(ctx context.Context, in *UpdateBiographyByAdminRequestRequest, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, AdminService_UpdateBiographyByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetJobResumeByAdmin(ctx context.Context, in *GetJobResumeByAdminRequestRequest, opts ...grpc.CallOption) (*JobResume, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResume)
	err := c.cc.Invoke(ctx, AdminService_GetJobResumeByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateJobResumeByAdmin(ctx context.Context, in *UpdateJobResumeByAdminRequestRequest, opts ...grpc.CallOption) (*JobResume, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResume)
	err := c.cc.Invoke(ctx, AdminService_UpdateJobResumeByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
type AdminServiceServer interface {
	GetCabinetByAdmin(context.Context, *GetCabinetByAdminRequestRequest) (*Cabinet, error)
	GetProfileByAdmin(context.Context, *GetProfileByAdminRequestRequest) (*Profile, error)
	UpdateProfileByAdmin(context.Context, *UpdateProfileByAdminRequestRequest) (*Profile, error)
	GetBiographyByAdmin(context.Context, *GetBiographyByAdminRequestRequest) (*Biography, error)
	UpdateBiographyByAdmin(context.Context, *UpdateBiographyByAdminRequestRequest) (*Biography, error)
	GetJobResumeByAdmin(context.Context, *GetJobResumeByAdminRequestRequest) (*JobResume, error)
	UpdateJobResumeByAdmin(context.Context, *UpdateJobResumeByAdminRequestRequest) (*JobResume, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) GetCabinetByAdmin(context.Context, *GetCabinetByAdminRequestRequest) (*Cabinet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCabinetByAdmin not implemented")
}
func (UnimplementedAdminServiceServer) GetProfileByAdmin(context.Context, *GetProfileByAdminRequestRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByAdmin not implemented")
}
func (UnimplementedAdminServiceServer) UpdateProfileByAdmin(context.Context, *UpdateProfileByAdminRequestRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfileByAdmin not implemented")
}
func (UnimplementedAdminServiceServer) GetBiographyByAdmin(context.Context, *GetBiographyByAdminRequestRequest) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBiographyByAdmin not implemented")
}
func (UnimplementedAdminServiceServer) UpdateBiographyByAdmin(context.Context, *UpdateBiographyByAdminRequestRequest) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBiographyByAdmin not implemented")
}
func (UnimplementedAdminServiceServer) GetJobResumeByAdmin(context.Context, *GetJobResumeByAdminRequestRequest) (*JobResume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobResumeByAdmin not implemented")
}
func (UnimplementedAdminServiceServer) UpdateJobResumeByAdmin(context.Context, *UpdateJobResumeByAdminRequestRequest) (*JobResume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobResumeByAdmin not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_GetCabinetByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCabinetByAdminRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCabinetByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCabinetByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCabinetByAdmin(ctx, req.(*GetCabinetByAdminRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProfileByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileByAdminRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProfileByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetProfileByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProfileByAdmin(ctx, req.(*GetProfileByAdminRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateProfileByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileByAdminRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateProfileByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateProfileByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateProfileByAdmin(ctx, req.(*UpdateProfileByAdminRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetBiographyByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBiographyByAdminRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetBiographyByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetBiographyByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetBiographyByAdmin(ctx, req.(*GetBiographyByAdminRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateBiographyByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBiographyByAdminRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateBiographyByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateBiographyByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateBiographyByAdmin(ctx, req.(*UpdateBiographyByAdminRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetJobResumeByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobResumeByAdminRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetJobResumeByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetJobResumeByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetJobResumeByAdmin(ctx, req.(*GetJobResumeByAdminRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateJobResumeByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobResumeByAdminRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateJobResumeByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateJobResumeByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateJobResumeByAdmin(ctx, req.(*UpdateJobResumeByAdminRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elector.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCabinetByAdmin",
			Handler:    _AdminService_GetCabinetByAdmin_Handler,
		},
		{
			MethodName: "GetProfileByAdmin",
			Handler:    _AdminService_GetProfileByAdmin_Handler,
		},
		{
			MethodName: "UpdateProfileByAdmin",
			Handler:    _AdminService_UpdateProfileByAdmin_Handler,
		},
		{
			MethodName: "GetBiographyByAdmin",
			Handler:    _AdminService_GetBiographyByAdmin_Handler,
		},
		{
			MethodName: "UpdateBiographyByAdmin",
			Handler:    _AdminService_UpdateBiographyByAdmin_Handler,
		},
		{
			MethodName: "GetJobResumeByAdmin",
			Handler:    _AdminService_GetJobResumeByAdmin_Handler,
		},
		{
			MethodName: "UpdateJobResumeByAdmin",
			Handler:    _AdminService_UpdateJobResumeByAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/electorcab/cab_admin.proto",
}
