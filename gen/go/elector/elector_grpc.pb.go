// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: elector/elector.proto

package elector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_GetOwnCabinet_FullMethodName            = "/elector.Service/GetOwnCabinet"
	Service_AdminGetCabinet_FullMethodName          = "/elector.Service/AdminGetCabinet"
	Service_GetOwnProfile_FullMethodName            = "/elector.Service/GetOwnProfile"
	Service_GetOwnBiography_FullMethodName          = "/elector.Service/GetOwnBiography"
	Service_GetOwnJob_FullMethodName                = "/elector.Service/GetOwnJob"
	Service_UpdateOwnProfile_FullMethodName         = "/elector.Service/UpdateOwnProfile"
	Service_UpdateOwnResidence_FullMethodName       = "/elector.Service/UpdateOwnResidence"
	Service_UpdateOwnSex_FullMethodName             = "/elector.Service/UpdateOwnSex"
	Service_UpdateOwnBirthday_FullMethodName        = "/elector.Service/UpdateOwnBirthday"
	Service_UpdateOwnNationality_FullMethodName     = "/elector.Service/UpdateOwnNationality"
	Service_UpdateOwnPrimaryLanguage_FullMethodName = "/elector.Service/UpdateOwnPrimaryLanguage"
	Service_UpdateOwnCountry_FullMethodName         = "/elector.Service/UpdateOwnCountry"
	Service_UpdateOwnCity_FullMethodName            = "/elector.Service/UpdateOwnCity"
	Service_UpdateOwnDegree_FullMethodName          = "/elector.Service/UpdateOwnDegree"
	Service_UpdateOwnIndustry_FullMethodName        = "/elector.Service/UpdateOwnIndustry"
	Service_UpdateOwnIncome_FullMethodName          = "/elector.Service/UpdateOwnIncome"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	GetOwnCabinet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Cabinet, error)
	AdminGetCabinet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Cabinet, error)
	GetOwnProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Profile, error)
	GetOwnBiography(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Biography, error)
	GetOwnJob(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Job, error)
	UpdateOwnProfile(ctx context.Context, in *UpdateOwnProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	UpdateOwnResidence(ctx context.Context, in *UpdateOwnResidenceRequest, opts ...grpc.CallOption) (*Biography, error)
	UpdateOwnSex(ctx context.Context, in *UpdateOwnSexRequest, opts ...grpc.CallOption) (*Biography, error)
	UpdateOwnBirthday(ctx context.Context, in *UpdateOwnBirthdayRequest, opts ...grpc.CallOption) (*Biography, error)
	UpdateOwnNationality(ctx context.Context, in *UpdateOwnNationalityRequest, opts ...grpc.CallOption) (*Biography, error)
	UpdateOwnPrimaryLanguage(ctx context.Context, in *UpdateOwnPrimaryLanguageRequest, opts ...grpc.CallOption) (*Biography, error)
	UpdateOwnCountry(ctx context.Context, in *UpdateOwnCountryRequest, opts ...grpc.CallOption) (*Biography, error)
	UpdateOwnCity(ctx context.Context, in *UpdateOwnCityRequest, opts ...grpc.CallOption) (*Biography, error)
	UpdateOwnDegree(ctx context.Context, in *UpdateOwnDegreeRequest, opts ...grpc.CallOption) (*Job, error)
	UpdateOwnIndustry(ctx context.Context, in *UpdateOwnIndustryRequest, opts ...grpc.CallOption) (*Job, error)
	UpdateOwnIncome(ctx context.Context, in *UpdateOwnIncomeRequest, opts ...grpc.CallOption) (*Job, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetOwnCabinet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Cabinet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cabinet)
	err := c.cc.Invoke(ctx, Service_GetOwnCabinet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AdminGetCabinet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Cabinet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cabinet)
	err := c.cc.Invoke(ctx, Service_AdminGetCabinet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetOwnProfile(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Service_GetOwnProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetOwnBiography(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, Service_GetOwnBiography_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetOwnJob(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, Service_GetOwnJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnProfile(ctx context.Context, in *UpdateOwnProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, Service_UpdateOwnProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnResidence(ctx context.Context, in *UpdateOwnResidenceRequest, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, Service_UpdateOwnResidence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnSex(ctx context.Context, in *UpdateOwnSexRequest, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, Service_UpdateOwnSex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnBirthday(ctx context.Context, in *UpdateOwnBirthdayRequest, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, Service_UpdateOwnBirthday_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnNationality(ctx context.Context, in *UpdateOwnNationalityRequest, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, Service_UpdateOwnNationality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnPrimaryLanguage(ctx context.Context, in *UpdateOwnPrimaryLanguageRequest, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, Service_UpdateOwnPrimaryLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnCountry(ctx context.Context, in *UpdateOwnCountryRequest, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, Service_UpdateOwnCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnCity(ctx context.Context, in *UpdateOwnCityRequest, opts ...grpc.CallOption) (*Biography, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Biography)
	err := c.cc.Invoke(ctx, Service_UpdateOwnCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnDegree(ctx context.Context, in *UpdateOwnDegreeRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, Service_UpdateOwnDegree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnIndustry(ctx context.Context, in *UpdateOwnIndustryRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, Service_UpdateOwnIndustry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateOwnIncome(ctx context.Context, in *UpdateOwnIncomeRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, Service_UpdateOwnIncome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	GetOwnCabinet(context.Context, *Empty) (*Cabinet, error)
	AdminGetCabinet(context.Context, *Empty) (*Cabinet, error)
	GetOwnProfile(context.Context, *Empty) (*Profile, error)
	GetOwnBiography(context.Context, *Empty) (*Biography, error)
	GetOwnJob(context.Context, *Empty) (*Job, error)
	UpdateOwnProfile(context.Context, *UpdateOwnProfileRequest) (*Profile, error)
	UpdateOwnResidence(context.Context, *UpdateOwnResidenceRequest) (*Biography, error)
	UpdateOwnSex(context.Context, *UpdateOwnSexRequest) (*Biography, error)
	UpdateOwnBirthday(context.Context, *UpdateOwnBirthdayRequest) (*Biography, error)
	UpdateOwnNationality(context.Context, *UpdateOwnNationalityRequest) (*Biography, error)
	UpdateOwnPrimaryLanguage(context.Context, *UpdateOwnPrimaryLanguageRequest) (*Biography, error)
	UpdateOwnCountry(context.Context, *UpdateOwnCountryRequest) (*Biography, error)
	UpdateOwnCity(context.Context, *UpdateOwnCityRequest) (*Biography, error)
	UpdateOwnDegree(context.Context, *UpdateOwnDegreeRequest) (*Job, error)
	UpdateOwnIndustry(context.Context, *UpdateOwnIndustryRequest) (*Job, error)
	UpdateOwnIncome(context.Context, *UpdateOwnIncomeRequest) (*Job, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) GetOwnCabinet(context.Context, *Empty) (*Cabinet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnCabinet not implemented")
}
func (UnimplementedServiceServer) AdminGetCabinet(context.Context, *Empty) (*Cabinet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetCabinet not implemented")
}
func (UnimplementedServiceServer) GetOwnProfile(context.Context, *Empty) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnProfile not implemented")
}
func (UnimplementedServiceServer) GetOwnBiography(context.Context, *Empty) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnBiography not implemented")
}
func (UnimplementedServiceServer) GetOwnJob(context.Context, *Empty) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnJob not implemented")
}
func (UnimplementedServiceServer) UpdateOwnProfile(context.Context, *UpdateOwnProfileRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnProfile not implemented")
}
func (UnimplementedServiceServer) UpdateOwnResidence(context.Context, *UpdateOwnResidenceRequest) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnResidence not implemented")
}
func (UnimplementedServiceServer) UpdateOwnSex(context.Context, *UpdateOwnSexRequest) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnSex not implemented")
}
func (UnimplementedServiceServer) UpdateOwnBirthday(context.Context, *UpdateOwnBirthdayRequest) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnBirthday not implemented")
}
func (UnimplementedServiceServer) UpdateOwnNationality(context.Context, *UpdateOwnNationalityRequest) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnNationality not implemented")
}
func (UnimplementedServiceServer) UpdateOwnPrimaryLanguage(context.Context, *UpdateOwnPrimaryLanguageRequest) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnPrimaryLanguage not implemented")
}
func (UnimplementedServiceServer) UpdateOwnCountry(context.Context, *UpdateOwnCountryRequest) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnCountry not implemented")
}
func (UnimplementedServiceServer) UpdateOwnCity(context.Context, *UpdateOwnCityRequest) (*Biography, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnCity not implemented")
}
func (UnimplementedServiceServer) UpdateOwnDegree(context.Context, *UpdateOwnDegreeRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnDegree not implemented")
}
func (UnimplementedServiceServer) UpdateOwnIndustry(context.Context, *UpdateOwnIndustryRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnIndustry not implemented")
}
func (UnimplementedServiceServer) UpdateOwnIncome(context.Context, *UpdateOwnIncomeRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwnIncome not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetOwnCabinet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetOwnCabinet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetOwnCabinet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetOwnCabinet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AdminGetCabinet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AdminGetCabinet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AdminGetCabinet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AdminGetCabinet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetOwnProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetOwnProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetOwnProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetOwnProfile(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetOwnBiography_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetOwnBiography(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetOwnBiography_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetOwnBiography(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetOwnJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetOwnJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetOwnJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetOwnJob(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnProfile(ctx, req.(*UpdateOwnProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnResidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnResidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnResidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnResidence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnResidence(ctx, req.(*UpdateOwnResidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnSex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnSexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnSex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnSex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnSex(ctx, req.(*UpdateOwnSexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnBirthday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnBirthdayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnBirthday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnBirthday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnBirthday(ctx, req.(*UpdateOwnBirthdayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnNationality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnNationalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnNationality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnNationality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnNationality(ctx, req.(*UpdateOwnNationalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnPrimaryLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnPrimaryLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnPrimaryLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnPrimaryLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnPrimaryLanguage(ctx, req.(*UpdateOwnPrimaryLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnCountry(ctx, req.(*UpdateOwnCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnCity(ctx, req.(*UpdateOwnCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnDegree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnDegree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnDegree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnDegree(ctx, req.(*UpdateOwnDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnIndustryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnIndustry(ctx, req.(*UpdateOwnIndustryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateOwnIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOwnIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateOwnIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateOwnIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateOwnIncome(ctx, req.(*UpdateOwnIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elector.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOwnCabinet",
			Handler:    _Service_GetOwnCabinet_Handler,
		},
		{
			MethodName: "AdminGetCabinet",
			Handler:    _Service_AdminGetCabinet_Handler,
		},
		{
			MethodName: "GetOwnProfile",
			Handler:    _Service_GetOwnProfile_Handler,
		},
		{
			MethodName: "GetOwnBiography",
			Handler:    _Service_GetOwnBiography_Handler,
		},
		{
			MethodName: "GetOwnJob",
			Handler:    _Service_GetOwnJob_Handler,
		},
		{
			MethodName: "UpdateOwnProfile",
			Handler:    _Service_UpdateOwnProfile_Handler,
		},
		{
			MethodName: "UpdateOwnResidence",
			Handler:    _Service_UpdateOwnResidence_Handler,
		},
		{
			MethodName: "UpdateOwnSex",
			Handler:    _Service_UpdateOwnSex_Handler,
		},
		{
			MethodName: "UpdateOwnBirthday",
			Handler:    _Service_UpdateOwnBirthday_Handler,
		},
		{
			MethodName: "UpdateOwnNationality",
			Handler:    _Service_UpdateOwnNationality_Handler,
		},
		{
			MethodName: "UpdateOwnPrimaryLanguage",
			Handler:    _Service_UpdateOwnPrimaryLanguage_Handler,
		},
		{
			MethodName: "UpdateOwnCountry",
			Handler:    _Service_UpdateOwnCountry_Handler,
		},
		{
			MethodName: "UpdateOwnCity",
			Handler:    _Service_UpdateOwnCity_Handler,
		},
		{
			MethodName: "UpdateOwnDegree",
			Handler:    _Service_UpdateOwnDegree_Handler,
		},
		{
			MethodName: "UpdateOwnIndustry",
			Handler:    _Service_UpdateOwnIndustry_Handler,
		},
		{
			MethodName: "UpdateOwnIncome",
			Handler:    _Service_UpdateOwnIncome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elector/elector.proto",
}
