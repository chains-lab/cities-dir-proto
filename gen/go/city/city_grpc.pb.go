// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: city/city.proto

package city

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CityService_SendFormToCreateCity_FullMethodName      = "/city.CityService/SendFormToCreateCity"
	CityService_GetFormToCreateCreateCity_FullMethodName = "/city.CityService/GetFormToCreateCreateCity"
	CityService_SearchFormToCreateCity_FullMethodName    = "/city.CityService/SearchFormToCreateCity"
	CityService_GetCityById_FullMethodName               = "/city.CityService/GetCityById"
	CityService_UpdateCityStatus_FullMethodName          = "/city.CityService/UpdateCityStatus"
	CityService_UpdateCityName_FullMethodName            = "/city.CityService/UpdateCityName"
	CityService_SearchCities_FullMethodName              = "/city.CityService/SearchCities"
)

// CityServiceClient is the client API for CityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityServiceClient interface {
	SendFormToCreateCity(ctx context.Context, in *SendFormToCreateCityRequest, opts ...grpc.CallOption) (*City, error)
	GetFormToCreateCreateCity(ctx context.Context, in *GetFormToCreateCreateCityRequest, opts ...grpc.CallOption) (*FormToCreateCity, error)
	SearchFormToCreateCity(ctx context.Context, in *SearchFormToCreateCityRequest, opts ...grpc.CallOption) (*FormToCreateCity, error)
	GetCityById(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*City, error)
	UpdateCityStatus(ctx context.Context, in *UpdateCityStatusRequest, opts ...grpc.CallOption) (*City, error)
	UpdateCityName(ctx context.Context, in *UpdateCityNameRequest, opts ...grpc.CallOption) (*City, error)
	SearchCities(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*CitiesList, error)
}

type cityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCityServiceClient(cc grpc.ClientConnInterface) CityServiceClient {
	return &cityServiceClient{cc}
}

func (c *cityServiceClient) SendFormToCreateCity(ctx context.Context, in *SendFormToCreateCityRequest, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, CityService_SendFormToCreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) GetFormToCreateCreateCity(ctx context.Context, in *GetFormToCreateCreateCityRequest, opts ...grpc.CallOption) (*FormToCreateCity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormToCreateCity)
	err := c.cc.Invoke(ctx, CityService_GetFormToCreateCreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) SearchFormToCreateCity(ctx context.Context, in *SearchFormToCreateCityRequest, opts ...grpc.CallOption) (*FormToCreateCity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FormToCreateCity)
	err := c.cc.Invoke(ctx, CityService_SearchFormToCreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) GetCityById(ctx context.Context, in *GetCityByIdRequest, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, CityService_GetCityById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) UpdateCityStatus(ctx context.Context, in *UpdateCityStatusRequest, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, CityService_UpdateCityStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) UpdateCityName(ctx context.Context, in *UpdateCityNameRequest, opts ...grpc.CallOption) (*City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(City)
	err := c.cc.Invoke(ctx, CityService_UpdateCityName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityServiceClient) SearchCities(ctx context.Context, in *SearchCitiesRequest, opts ...grpc.CallOption) (*CitiesList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CitiesList)
	err := c.cc.Invoke(ctx, CityService_SearchCities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityServiceServer is the server API for CityService service.
// All implementations must embed UnimplementedCityServiceServer
// for forward compatibility.
type CityServiceServer interface {
	SendFormToCreateCity(context.Context, *SendFormToCreateCityRequest) (*City, error)
	GetFormToCreateCreateCity(context.Context, *GetFormToCreateCreateCityRequest) (*FormToCreateCity, error)
	SearchFormToCreateCity(context.Context, *SearchFormToCreateCityRequest) (*FormToCreateCity, error)
	GetCityById(context.Context, *GetCityByIdRequest) (*City, error)
	UpdateCityStatus(context.Context, *UpdateCityStatusRequest) (*City, error)
	UpdateCityName(context.Context, *UpdateCityNameRequest) (*City, error)
	SearchCities(context.Context, *SearchCitiesRequest) (*CitiesList, error)
	mustEmbedUnimplementedCityServiceServer()
}

// UnimplementedCityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCityServiceServer struct{}

func (UnimplementedCityServiceServer) SendFormToCreateCity(context.Context, *SendFormToCreateCityRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFormToCreateCity not implemented")
}
func (UnimplementedCityServiceServer) GetFormToCreateCreateCity(context.Context, *GetFormToCreateCreateCityRequest) (*FormToCreateCity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormToCreateCreateCity not implemented")
}
func (UnimplementedCityServiceServer) SearchFormToCreateCity(context.Context, *SearchFormToCreateCityRequest) (*FormToCreateCity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFormToCreateCity not implemented")
}
func (UnimplementedCityServiceServer) GetCityById(context.Context, *GetCityByIdRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityById not implemented")
}
func (UnimplementedCityServiceServer) UpdateCityStatus(context.Context, *UpdateCityStatusRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityStatus not implemented")
}
func (UnimplementedCityServiceServer) UpdateCityName(context.Context, *UpdateCityNameRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityName not implemented")
}
func (UnimplementedCityServiceServer) SearchCities(context.Context, *SearchCitiesRequest) (*CitiesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCities not implemented")
}
func (UnimplementedCityServiceServer) mustEmbedUnimplementedCityServiceServer() {}
func (UnimplementedCityServiceServer) testEmbeddedByValue()                     {}

// UnsafeCityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityServiceServer will
// result in compilation errors.
type UnsafeCityServiceServer interface {
	mustEmbedUnimplementedCityServiceServer()
}

func RegisterCityServiceServer(s grpc.ServiceRegistrar, srv CityServiceServer) {
	// If the following call pancis, it indicates UnimplementedCityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CityService_ServiceDesc, srv)
}

func _CityService_SendFormToCreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFormToCreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).SendFormToCreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_SendFormToCreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).SendFormToCreateCity(ctx, req.(*SendFormToCreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_GetFormToCreateCreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormToCreateCreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).GetFormToCreateCreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_GetFormToCreateCreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).GetFormToCreateCreateCity(ctx, req.(*GetFormToCreateCreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_SearchFormToCreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFormToCreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).SearchFormToCreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_SearchFormToCreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).SearchFormToCreateCity(ctx, req.(*SearchFormToCreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_GetCityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).GetCityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_GetCityById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).GetCityById(ctx, req.(*GetCityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_UpdateCityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).UpdateCityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_UpdateCityStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).UpdateCityStatus(ctx, req.(*UpdateCityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_UpdateCityName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).UpdateCityName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_UpdateCityName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).UpdateCityName(ctx, req.(*UpdateCityNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityService_SearchCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).SearchCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityService_SearchCities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).SearchCities(ctx, req.(*SearchCitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CityService_ServiceDesc is the grpc.ServiceDesc for CityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "city.CityService",
	HandlerType: (*CityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFormToCreateCity",
			Handler:    _CityService_SendFormToCreateCity_Handler,
		},
		{
			MethodName: "GetFormToCreateCreateCity",
			Handler:    _CityService_GetFormToCreateCreateCity_Handler,
		},
		{
			MethodName: "SearchFormToCreateCity",
			Handler:    _CityService_SearchFormToCreateCity_Handler,
		},
		{
			MethodName: "GetCityById",
			Handler:    _CityService_GetCityById_Handler,
		},
		{
			MethodName: "UpdateCityStatus",
			Handler:    _CityService_UpdateCityStatus_Handler,
		},
		{
			MethodName: "UpdateCityName",
			Handler:    _CityService_UpdateCityName_Handler,
		},
		{
			MethodName: "SearchCities",
			Handler:    _CityService_SearchCities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "city/city.proto",
}
