// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: admin/admin.proto

package admin

import (
	context "context"
	city "github.com/chains-lab/cities-dir-proto/gen/go/city"
	citygov "github.com/chains-lab/cities-dir-proto/gen/go/citygov"
	country "github.com/chains-lab/cities-dir-proto/gen/go/country"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminPanelService_AcceptFormToCreateCity_FullMethodName  = "/admin.AdminPanelService/AcceptFormToCreateCity"
	AdminPanelService_DeclineFormToCreateCity_FullMethodName = "/admin.AdminPanelService/DeclineFormToCreateCity"
	AdminPanelService_CreateCountry_FullMethodName           = "/admin.AdminPanelService/CreateCountry"
	AdminPanelService_UpdateCountryName_FullMethodName       = "/admin.AdminPanelService/UpdateCountryName"
	AdminPanelService_UpdateCountryStatus_FullMethodName     = "/admin.AdminPanelService/UpdateCountryStatus"
	AdminPanelService_UpdateCityStatus_FullMethodName        = "/admin.AdminPanelService/UpdateCityStatus"
	AdminPanelService_CreateCityGov_FullMethodName           = "/admin.AdminPanelService/CreateCityGov"
	AdminPanelService_UpdateCityGov_FullMethodName           = "/admin.AdminPanelService/UpdateCityGov"
	AdminPanelService_DeleteCityGov_FullMethodName           = "/admin.AdminPanelService/DeleteCityGov"
)

// AdminPanelServiceClient is the client API for AdminPanelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminPanelServiceClient interface {
	AcceptFormToCreateCity(ctx context.Context, in *AcceptFormToCreateCityRequest, opts ...grpc.CallOption) (*city.City, error)
	DeclineFormToCreateCity(ctx context.Context, in *DeclineFormToCreateCityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*country.Country, error)
	UpdateCountryName(ctx context.Context, in *UpdateCountryNameRequest, opts ...grpc.CallOption) (*country.Country, error)
	UpdateCountryStatus(ctx context.Context, in *UpdateCountryStatusRequest, opts ...grpc.CallOption) (*country.Country, error)
	UpdateCityStatus(ctx context.Context, in *UpdateCityStatusRequest, opts ...grpc.CallOption) (*city.City, error)
	CreateCityGov(ctx context.Context, in *CreateCityGovRequest, opts ...grpc.CallOption) (*citygov.CityGov, error)
	UpdateCityGov(ctx context.Context, in *UpdateCityGovRequest, opts ...grpc.CallOption) (*citygov.CityGov, error)
	DeleteCityGov(ctx context.Context, in *DeleteCityGovRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type adminPanelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminPanelServiceClient(cc grpc.ClientConnInterface) AdminPanelServiceClient {
	return &adminPanelServiceClient{cc}
}

func (c *adminPanelServiceClient) AcceptFormToCreateCity(ctx context.Context, in *AcceptFormToCreateCityRequest, opts ...grpc.CallOption) (*city.City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(city.City)
	err := c.cc.Invoke(ctx, AdminPanelService_AcceptFormToCreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) DeclineFormToCreateCity(ctx context.Context, in *DeclineFormToCreateCityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdminPanelService_DeclineFormToCreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*country.Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(country.Country)
	err := c.cc.Invoke(ctx, AdminPanelService_CreateCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) UpdateCountryName(ctx context.Context, in *UpdateCountryNameRequest, opts ...grpc.CallOption) (*country.Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(country.Country)
	err := c.cc.Invoke(ctx, AdminPanelService_UpdateCountryName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) UpdateCountryStatus(ctx context.Context, in *UpdateCountryStatusRequest, opts ...grpc.CallOption) (*country.Country, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(country.Country)
	err := c.cc.Invoke(ctx, AdminPanelService_UpdateCountryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) UpdateCityStatus(ctx context.Context, in *UpdateCityStatusRequest, opts ...grpc.CallOption) (*city.City, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(city.City)
	err := c.cc.Invoke(ctx, AdminPanelService_UpdateCityStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) CreateCityGov(ctx context.Context, in *CreateCityGovRequest, opts ...grpc.CallOption) (*citygov.CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(citygov.CityGov)
	err := c.cc.Invoke(ctx, AdminPanelService_CreateCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) UpdateCityGov(ctx context.Context, in *UpdateCityGovRequest, opts ...grpc.CallOption) (*citygov.CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(citygov.CityGov)
	err := c.cc.Invoke(ctx, AdminPanelService_UpdateCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPanelServiceClient) DeleteCityGov(ctx context.Context, in *DeleteCityGovRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdminPanelService_DeleteCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminPanelServiceServer is the server API for AdminPanelService service.
// All implementations must embed UnimplementedAdminPanelServiceServer
// for forward compatibility.
type AdminPanelServiceServer interface {
	AcceptFormToCreateCity(context.Context, *AcceptFormToCreateCityRequest) (*city.City, error)
	DeclineFormToCreateCity(context.Context, *DeclineFormToCreateCityRequest) (*emptypb.Empty, error)
	CreateCountry(context.Context, *CreateCountryRequest) (*country.Country, error)
	UpdateCountryName(context.Context, *UpdateCountryNameRequest) (*country.Country, error)
	UpdateCountryStatus(context.Context, *UpdateCountryStatusRequest) (*country.Country, error)
	UpdateCityStatus(context.Context, *UpdateCityStatusRequest) (*city.City, error)
	CreateCityGov(context.Context, *CreateCityGovRequest) (*citygov.CityGov, error)
	UpdateCityGov(context.Context, *UpdateCityGovRequest) (*citygov.CityGov, error)
	DeleteCityGov(context.Context, *DeleteCityGovRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdminPanelServiceServer()
}

// UnimplementedAdminPanelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminPanelServiceServer struct{}

func (UnimplementedAdminPanelServiceServer) AcceptFormToCreateCity(context.Context, *AcceptFormToCreateCityRequest) (*city.City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFormToCreateCity not implemented")
}
func (UnimplementedAdminPanelServiceServer) DeclineFormToCreateCity(context.Context, *DeclineFormToCreateCityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineFormToCreateCity not implemented")
}
func (UnimplementedAdminPanelServiceServer) CreateCountry(context.Context, *CreateCountryRequest) (*country.Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountry not implemented")
}
func (UnimplementedAdminPanelServiceServer) UpdateCountryName(context.Context, *UpdateCountryNameRequest) (*country.Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountryName not implemented")
}
func (UnimplementedAdminPanelServiceServer) UpdateCountryStatus(context.Context, *UpdateCountryStatusRequest) (*country.Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountryStatus not implemented")
}
func (UnimplementedAdminPanelServiceServer) UpdateCityStatus(context.Context, *UpdateCityStatusRequest) (*city.City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityStatus not implemented")
}
func (UnimplementedAdminPanelServiceServer) CreateCityGov(context.Context, *CreateCityGovRequest) (*citygov.CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityGov not implemented")
}
func (UnimplementedAdminPanelServiceServer) UpdateCityGov(context.Context, *UpdateCityGovRequest) (*citygov.CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityGov not implemented")
}
func (UnimplementedAdminPanelServiceServer) DeleteCityGov(context.Context, *DeleteCityGovRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityGov not implemented")
}
func (UnimplementedAdminPanelServiceServer) mustEmbedUnimplementedAdminPanelServiceServer() {}
func (UnimplementedAdminPanelServiceServer) testEmbeddedByValue()                           {}

// UnsafeAdminPanelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminPanelServiceServer will
// result in compilation errors.
type UnsafeAdminPanelServiceServer interface {
	mustEmbedUnimplementedAdminPanelServiceServer()
}

func RegisterAdminPanelServiceServer(s grpc.ServiceRegistrar, srv AdminPanelServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminPanelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminPanelService_ServiceDesc, srv)
}

func _AdminPanelService_AcceptFormToCreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptFormToCreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).AcceptFormToCreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_AcceptFormToCreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).AcceptFormToCreateCity(ctx, req.(*AcceptFormToCreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_DeclineFormToCreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineFormToCreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).DeclineFormToCreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_DeclineFormToCreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).DeclineFormToCreateCity(ctx, req.(*DeclineFormToCreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_CreateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).CreateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_CreateCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).CreateCountry(ctx, req.(*CreateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_UpdateCountryName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).UpdateCountryName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_UpdateCountryName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).UpdateCountryName(ctx, req.(*UpdateCountryNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_UpdateCountryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).UpdateCountryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_UpdateCountryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).UpdateCountryStatus(ctx, req.(*UpdateCountryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_UpdateCityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).UpdateCityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_UpdateCityStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).UpdateCityStatus(ctx, req.(*UpdateCityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_CreateCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).CreateCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_CreateCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).CreateCityGov(ctx, req.(*CreateCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_UpdateCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).UpdateCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_UpdateCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).UpdateCityGov(ctx, req.(*UpdateCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminPanelService_DeleteCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminPanelServiceServer).DeleteCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminPanelService_DeleteCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminPanelServiceServer).DeleteCityGov(ctx, req.(*DeleteCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminPanelService_ServiceDesc is the grpc.ServiceDesc for AdminPanelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminPanelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminPanelService",
	HandlerType: (*AdminPanelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptFormToCreateCity",
			Handler:    _AdminPanelService_AcceptFormToCreateCity_Handler,
		},
		{
			MethodName: "DeclineFormToCreateCity",
			Handler:    _AdminPanelService_DeclineFormToCreateCity_Handler,
		},
		{
			MethodName: "CreateCountry",
			Handler:    _AdminPanelService_CreateCountry_Handler,
		},
		{
			MethodName: "UpdateCountryName",
			Handler:    _AdminPanelService_UpdateCountryName_Handler,
		},
		{
			MethodName: "UpdateCountryStatus",
			Handler:    _AdminPanelService_UpdateCountryStatus_Handler,
		},
		{
			MethodName: "UpdateCityStatus",
			Handler:    _AdminPanelService_UpdateCityStatus_Handler,
		},
		{
			MethodName: "CreateCityGov",
			Handler:    _AdminPanelService_CreateCityGov_Handler,
		},
		{
			MethodName: "UpdateCityGov",
			Handler:    _AdminPanelService_UpdateCityGov_Handler,
		},
		{
			MethodName: "DeleteCityGov",
			Handler:    _AdminPanelService_DeleteCityGov_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/admin.proto",
}
