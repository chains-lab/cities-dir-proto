// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: citygov/city_admin.proto

package citiesadmins

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CityAdminService_CreateCityOwner_FullMethodName      = "/cities_admins.CityAdminService/CreateCityOwner"
	CityAdminService_TransferOwnership_FullMethodName    = "/cities_admins.CityAdminService/TransferOwnership"
	CityAdminService_CreateCityAdmin_FullMethodName      = "/cities_admins.CityAdminService/CreateCityAdmin"
	CityAdminService_UpdateCityAdmin_FullMethodName      = "/cities_admins.CityAdminService/UpdateCityAdmin"
	CityAdminService_DeleteCityAdmin_FullMethodName      = "/cities_admins.CityAdminService/DeleteCityAdmin"
	CityAdminService_RefuseCityAdminRight_FullMethodName = "/cities_admins.CityAdminService/RefuseCityAdminRight"
	CityAdminService_GetCityAdmin_FullMethodName         = "/cities_admins.CityAdminService/GetCityAdmin"
	CityAdminService_ListCityAdmins_FullMethodName       = "/cities_admins.CityAdminService/ListCityAdmins"
)

// CityAdminServiceClient is the client API for CityAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityAdminServiceClient interface {
	CreateCityOwner(ctx context.Context, in *CreateCityOwnerRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	CreateCityAdmin(ctx context.Context, in *CreateCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	UpdateCityAdmin(ctx context.Context, in *UpdateCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	DeleteCityAdmin(ctx context.Context, in *DeleteCityAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefuseCityAdminRight(ctx context.Context, in *RefuseCityAdminRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCityAdmin(ctx context.Context, in *GetCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	ListCityAdmins(ctx context.Context, in *ListCityAdminsRequest, opts ...grpc.CallOption) (*ListCitiesAdmins, error)
}

type cityAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCityAdminServiceClient(cc grpc.ClientConnInterface) CityAdminServiceClient {
	return &cityAdminServiceClient{cc}
}

func (c *cityAdminServiceClient) CreateCityOwner(ctx context.Context, in *CreateCityOwnerRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_CreateCityOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_TransferOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) CreateCityAdmin(ctx context.Context, in *CreateCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_CreateCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) UpdateCityAdmin(ctx context.Context, in *UpdateCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_UpdateCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) DeleteCityAdmin(ctx context.Context, in *DeleteCityAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityAdminService_DeleteCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) RefuseCityAdminRight(ctx context.Context, in *RefuseCityAdminRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityAdminService_RefuseCityAdminRight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) GetCityAdmin(ctx context.Context, in *GetCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityAdminService_GetCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityAdminServiceClient) ListCityAdmins(ctx context.Context, in *ListCityAdminsRequest, opts ...grpc.CallOption) (*ListCitiesAdmins, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCitiesAdmins)
	err := c.cc.Invoke(ctx, CityAdminService_ListCityAdmins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityAdminServiceServer is the server API for CityAdminService service.
// All implementations must embed UnimplementedCityAdminServiceServer
// for forward compatibility.
type CityAdminServiceServer interface {
	CreateCityOwner(context.Context, *CreateCityOwnerRequest) (*CityAdmin, error)
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*CityAdmin, error)
	CreateCityAdmin(context.Context, *CreateCityAdminRequest) (*CityAdmin, error)
	UpdateCityAdmin(context.Context, *UpdateCityAdminRequest) (*CityAdmin, error)
	DeleteCityAdmin(context.Context, *DeleteCityAdminRequest) (*emptypb.Empty, error)
	RefuseCityAdminRight(context.Context, *RefuseCityAdminRightRequest) (*emptypb.Empty, error)
	GetCityAdmin(context.Context, *GetCityAdminRequest) (*CityAdmin, error)
	ListCityAdmins(context.Context, *ListCityAdminsRequest) (*ListCitiesAdmins, error)
	mustEmbedUnimplementedCityAdminServiceServer()
}

// UnimplementedCityAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCityAdminServiceServer struct{}

func (UnimplementedCityAdminServiceServer) CreateCityOwner(context.Context, *CreateCityOwnerRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityOwner not implemented")
}
func (UnimplementedCityAdminServiceServer) TransferOwnership(context.Context, *TransferOwnershipRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedCityAdminServiceServer) CreateCityAdmin(context.Context, *CreateCityAdminRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityAdmin not implemented")
}
func (UnimplementedCityAdminServiceServer) UpdateCityAdmin(context.Context, *UpdateCityAdminRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityAdmin not implemented")
}
func (UnimplementedCityAdminServiceServer) DeleteCityAdmin(context.Context, *DeleteCityAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityAdmin not implemented")
}
func (UnimplementedCityAdminServiceServer) RefuseCityAdminRight(context.Context, *RefuseCityAdminRightRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseCityAdminRight not implemented")
}
func (UnimplementedCityAdminServiceServer) GetCityAdmin(context.Context, *GetCityAdminRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityAdmin not implemented")
}
func (UnimplementedCityAdminServiceServer) ListCityAdmins(context.Context, *ListCityAdminsRequest) (*ListCitiesAdmins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCityAdmins not implemented")
}
func (UnimplementedCityAdminServiceServer) mustEmbedUnimplementedCityAdminServiceServer() {}
func (UnimplementedCityAdminServiceServer) testEmbeddedByValue()                          {}

// UnsafeCityAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityAdminServiceServer will
// result in compilation errors.
type UnsafeCityAdminServiceServer interface {
	mustEmbedUnimplementedCityAdminServiceServer()
}

func RegisterCityAdminServiceServer(s grpc.ServiceRegistrar, srv CityAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedCityAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CityAdminService_ServiceDesc, srv)
}

func _CityAdminService_CreateCityOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).CreateCityOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_CreateCityOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).CreateCityOwner(ctx, req.(*CreateCityOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_CreateCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).CreateCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_CreateCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).CreateCityAdmin(ctx, req.(*CreateCityAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_UpdateCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).UpdateCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_UpdateCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).UpdateCityAdmin(ctx, req.(*UpdateCityAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_DeleteCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).DeleteCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_DeleteCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).DeleteCityAdmin(ctx, req.(*DeleteCityAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_RefuseCityAdminRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefuseCityAdminRightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).RefuseCityAdminRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_RefuseCityAdminRight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).RefuseCityAdminRight(ctx, req.(*RefuseCityAdminRightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_GetCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).GetCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_GetCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).GetCityAdmin(ctx, req.(*GetCityAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityAdminService_ListCityAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCityAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityAdminServiceServer).ListCityAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityAdminService_ListCityAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityAdminServiceServer).ListCityAdmins(ctx, req.(*ListCityAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CityAdminService_ServiceDesc is the grpc.ServiceDesc for CityAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CityAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cities_admins.CityAdminService",
	HandlerType: (*CityAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCityOwner",
			Handler:    _CityAdminService_CreateCityOwner_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _CityAdminService_TransferOwnership_Handler,
		},
		{
			MethodName: "CreateCityAdmin",
			Handler:    _CityAdminService_CreateCityAdmin_Handler,
		},
		{
			MethodName: "UpdateCityAdmin",
			Handler:    _CityAdminService_UpdateCityAdmin_Handler,
		},
		{
			MethodName: "DeleteCityAdmin",
			Handler:    _CityAdminService_DeleteCityAdmin_Handler,
		},
		{
			MethodName: "RefuseCityAdminRight",
			Handler:    _CityAdminService_RefuseCityAdminRight_Handler,
		},
		{
			MethodName: "GetCityAdmin",
			Handler:    _CityAdminService_GetCityAdmin_Handler,
		},
		{
			MethodName: "ListCityAdmins",
			Handler:    _CityAdminService_ListCityAdmins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "citygov/city_admin.proto",
}
