// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: citygov/citygov.proto

package citygov

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CityGovService_CreateCityOwner_FullMethodName      = "/citygov.CityGovService/CreateCityOwner"
	CityGovService_DeleteCityOwner_FullMethodName      = "/citygov.CityGovService/DeleteCityOwner"
	CityGovService_TransferOwnership_FullMethodName    = "/citygov.CityGovService/TransferOwnership"
	CityGovService_CreateCityAdmin_FullMethodName      = "/citygov.CityGovService/CreateCityAdmin"
	CityGovService_UpdateCityAdmin_FullMethodName      = "/citygov.CityGovService/UpdateCityAdmin"
	CityGovService_DeleteCityAdmin_FullMethodName      = "/citygov.CityGovService/DeleteCityAdmin"
	CityGovService_RefuseCityAdminRight_FullMethodName = "/citygov.CityGovService/RefuseCityAdminRight"
	CityGovService_GetCityAdmin_FullMethodName         = "/citygov.CityGovService/GetCityAdmin"
	CityGovService_ListCityAdmins_FullMethodName       = "/citygov.CityGovService/ListCityAdmins"
	CityGovService_GetUserCitiesAdmins_FullMethodName  = "/citygov.CityGovService/GetUserCitiesAdmins"
)

// CityGovServiceClient is the client API for CityGovService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityGovServiceClient interface {
	CreateCityOwner(ctx context.Context, in *CreateCityOwnerRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	DeleteCityOwner(ctx context.Context, in *DeleteCityOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	CreateCityAdmin(ctx context.Context, in *CreateCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	UpdateCityAdmin(ctx context.Context, in *UpdateCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	DeleteCityAdmin(ctx context.Context, in *DeleteCityAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefuseCityAdminRight(ctx context.Context, in *RefuseCityAdminRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCityAdmin(ctx context.Context, in *GetCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error)
	ListCityAdmins(ctx context.Context, in *ListCityAdminsRequest, opts ...grpc.CallOption) (*ListCitiesAdmins, error)
	GetUserCitiesAdmins(ctx context.Context, in *GetUserCitiesAdminsRequest, opts ...grpc.CallOption) (*ListCitiesAdmins, error)
}

type cityGovServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCityGovServiceClient(cc grpc.ClientConnInterface) CityGovServiceClient {
	return &cityGovServiceClient{cc}
}

func (c *cityGovServiceClient) CreateCityOwner(ctx context.Context, in *CreateCityOwnerRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityGovService_CreateCityOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) DeleteCityOwner(ctx context.Context, in *DeleteCityOwnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityGovService_DeleteCityOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityGovService_TransferOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) CreateCityAdmin(ctx context.Context, in *CreateCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityGovService_CreateCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) UpdateCityAdmin(ctx context.Context, in *UpdateCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityGovService_UpdateCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) DeleteCityAdmin(ctx context.Context, in *DeleteCityAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityGovService_DeleteCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) RefuseCityAdminRight(ctx context.Context, in *RefuseCityAdminRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityGovService_RefuseCityAdminRight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) GetCityAdmin(ctx context.Context, in *GetCityAdminRequest, opts ...grpc.CallOption) (*CityAdmin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityAdmin)
	err := c.cc.Invoke(ctx, CityGovService_GetCityAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) ListCityAdmins(ctx context.Context, in *ListCityAdminsRequest, opts ...grpc.CallOption) (*ListCitiesAdmins, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCitiesAdmins)
	err := c.cc.Invoke(ctx, CityGovService_ListCityAdmins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) GetUserCitiesAdmins(ctx context.Context, in *GetUserCitiesAdminsRequest, opts ...grpc.CallOption) (*ListCitiesAdmins, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCitiesAdmins)
	err := c.cc.Invoke(ctx, CityGovService_GetUserCitiesAdmins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityGovServiceServer is the server API for CityGovService service.
// All implementations must embed UnimplementedCityGovServiceServer
// for forward compatibility.
type CityGovServiceServer interface {
	CreateCityOwner(context.Context, *CreateCityOwnerRequest) (*CityAdmin, error)
	DeleteCityOwner(context.Context, *DeleteCityOwnerRequest) (*emptypb.Empty, error)
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*CityAdmin, error)
	CreateCityAdmin(context.Context, *CreateCityAdminRequest) (*CityAdmin, error)
	UpdateCityAdmin(context.Context, *UpdateCityAdminRequest) (*CityAdmin, error)
	DeleteCityAdmin(context.Context, *DeleteCityAdminRequest) (*emptypb.Empty, error)
	RefuseCityAdminRight(context.Context, *RefuseCityAdminRightRequest) (*emptypb.Empty, error)
	GetCityAdmin(context.Context, *GetCityAdminRequest) (*CityAdmin, error)
	ListCityAdmins(context.Context, *ListCityAdminsRequest) (*ListCitiesAdmins, error)
	GetUserCitiesAdmins(context.Context, *GetUserCitiesAdminsRequest) (*ListCitiesAdmins, error)
	mustEmbedUnimplementedCityGovServiceServer()
}

// UnimplementedCityGovServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCityGovServiceServer struct{}

func (UnimplementedCityGovServiceServer) CreateCityOwner(context.Context, *CreateCityOwnerRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityOwner not implemented")
}
func (UnimplementedCityGovServiceServer) DeleteCityOwner(context.Context, *DeleteCityOwnerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityOwner not implemented")
}
func (UnimplementedCityGovServiceServer) TransferOwnership(context.Context, *TransferOwnershipRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedCityGovServiceServer) CreateCityAdmin(context.Context, *CreateCityAdminRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityAdmin not implemented")
}
func (UnimplementedCityGovServiceServer) UpdateCityAdmin(context.Context, *UpdateCityAdminRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityAdmin not implemented")
}
func (UnimplementedCityGovServiceServer) DeleteCityAdmin(context.Context, *DeleteCityAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityAdmin not implemented")
}
func (UnimplementedCityGovServiceServer) RefuseCityAdminRight(context.Context, *RefuseCityAdminRightRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseCityAdminRight not implemented")
}
func (UnimplementedCityGovServiceServer) GetCityAdmin(context.Context, *GetCityAdminRequest) (*CityAdmin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityAdmin not implemented")
}
func (UnimplementedCityGovServiceServer) ListCityAdmins(context.Context, *ListCityAdminsRequest) (*ListCitiesAdmins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCityAdmins not implemented")
}
func (UnimplementedCityGovServiceServer) GetUserCitiesAdmins(context.Context, *GetUserCitiesAdminsRequest) (*ListCitiesAdmins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCitiesAdmins not implemented")
}
func (UnimplementedCityGovServiceServer) mustEmbedUnimplementedCityGovServiceServer() {}
func (UnimplementedCityGovServiceServer) testEmbeddedByValue()                        {}

// UnsafeCityGovServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityGovServiceServer will
// result in compilation errors.
type UnsafeCityGovServiceServer interface {
	mustEmbedUnimplementedCityGovServiceServer()
}

func RegisterCityGovServiceServer(s grpc.ServiceRegistrar, srv CityGovServiceServer) {
	// If the following call pancis, it indicates UnimplementedCityGovServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CityGovService_ServiceDesc, srv)
}

func _CityGovService_CreateCityOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).CreateCityOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_CreateCityOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).CreateCityOwner(ctx, req.(*CreateCityOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_DeleteCityOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).DeleteCityOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_DeleteCityOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).DeleteCityOwner(ctx, req.(*DeleteCityOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_CreateCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).CreateCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_CreateCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).CreateCityAdmin(ctx, req.(*CreateCityAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_UpdateCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).UpdateCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_UpdateCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).UpdateCityAdmin(ctx, req.(*UpdateCityAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_DeleteCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).DeleteCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_DeleteCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).DeleteCityAdmin(ctx, req.(*DeleteCityAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_RefuseCityAdminRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefuseCityAdminRightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).RefuseCityAdminRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_RefuseCityAdminRight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).RefuseCityAdminRight(ctx, req.(*RefuseCityAdminRightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_GetCityAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).GetCityAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_GetCityAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).GetCityAdmin(ctx, req.(*GetCityAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_ListCityAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCityAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).ListCityAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_ListCityAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).ListCityAdmins(ctx, req.(*ListCityAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_GetUserCitiesAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCitiesAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).GetUserCitiesAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_GetUserCitiesAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).GetUserCitiesAdmins(ctx, req.(*GetUserCitiesAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CityGovService_ServiceDesc is the grpc.ServiceDesc for CityGovService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CityGovService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citygov.CityGovService",
	HandlerType: (*CityGovServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCityOwner",
			Handler:    _CityGovService_CreateCityOwner_Handler,
		},
		{
			MethodName: "DeleteCityOwner",
			Handler:    _CityGovService_DeleteCityOwner_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _CityGovService_TransferOwnership_Handler,
		},
		{
			MethodName: "CreateCityAdmin",
			Handler:    _CityGovService_CreateCityAdmin_Handler,
		},
		{
			MethodName: "UpdateCityAdmin",
			Handler:    _CityGovService_UpdateCityAdmin_Handler,
		},
		{
			MethodName: "DeleteCityAdmin",
			Handler:    _CityGovService_DeleteCityAdmin_Handler,
		},
		{
			MethodName: "RefuseCityAdminRight",
			Handler:    _CityGovService_RefuseCityAdminRight_Handler,
		},
		{
			MethodName: "GetCityAdmin",
			Handler:    _CityGovService_GetCityAdmin_Handler,
		},
		{
			MethodName: "ListCityAdmins",
			Handler:    _CityGovService_ListCityAdmins_Handler,
		},
		{
			MethodName: "GetUserCitiesAdmins",
			Handler:    _CityGovService_GetUserCitiesAdmins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "citygov/citygov.proto",
}
