// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: citygov/citygov.proto

package citygov

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CityGovService_CreateCityGov_FullMethodName      = "/citygov.CityGovService/CreateCityGov"
	CityGovService_UpdateCityGov_FullMethodName      = "/citygov.CityGovService/UpdateCityGov"
	CityGovService_DeleteCityGov_FullMethodName      = "/citygov.CityGovService/DeleteCityGov"
	CityGovService_RefuseCityGovRight_FullMethodName = "/citygov.CityGovService/RefuseCityGovRight"
	CityGovService_TransferOwnership_FullMethodName  = "/citygov.CityGovService/TransferOwnership"
	CityGovService_GetCityGov_FullMethodName         = "/citygov.CityGovService/GetCityGov"
	CityGovService_GetListCityGovs_FullMethodName    = "/citygov.CityGovService/GetListCityGovs"
)

// CityGovServiceClient is the client API for CityGovService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityGovServiceClient interface {
	CreateCityGov(ctx context.Context, in *CreateCityGovRequest, opts ...grpc.CallOption) (*CityGov, error)
	UpdateCityGov(ctx context.Context, in *UpdateCityGovRequest, opts ...grpc.CallOption) (*CityGov, error)
	DeleteCityGov(ctx context.Context, in *DeleteCityGovRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefuseCityGovRight(ctx context.Context, in *RefuseCityGovRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCityGov(ctx context.Context, in *GetCityGovRequest, opts ...grpc.CallOption) (*CityGov, error)
	GetListCityGovs(ctx context.Context, in *ListCityGovsRequest, opts ...grpc.CallOption) (*ListCityGovs, error)
}

type cityGovServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCityGovServiceClient(cc grpc.ClientConnInterface) CityGovServiceClient {
	return &cityGovServiceClient{cc}
}

func (c *cityGovServiceClient) CreateCityGov(ctx context.Context, in *CreateCityGovRequest, opts ...grpc.CallOption) (*CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityGov)
	err := c.cc.Invoke(ctx, CityGovService_CreateCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) UpdateCityGov(ctx context.Context, in *UpdateCityGovRequest, opts ...grpc.CallOption) (*CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityGov)
	err := c.cc.Invoke(ctx, CityGovService_UpdateCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) DeleteCityGov(ctx context.Context, in *DeleteCityGovRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityGovService_DeleteCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) RefuseCityGovRight(ctx context.Context, in *RefuseCityGovRightRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityGovService_RefuseCityGovRight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CityGovService_TransferOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) GetCityGov(ctx context.Context, in *GetCityGovRequest, opts ...grpc.CallOption) (*CityGov, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityGov)
	err := c.cc.Invoke(ctx, CityGovService_GetCityGov_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityGovServiceClient) GetListCityGovs(ctx context.Context, in *ListCityGovsRequest, opts ...grpc.CallOption) (*ListCityGovs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCityGovs)
	err := c.cc.Invoke(ctx, CityGovService_GetListCityGovs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityGovServiceServer is the server API for CityGovService service.
// All implementations must embed UnimplementedCityGovServiceServer
// for forward compatibility.
type CityGovServiceServer interface {
	CreateCityGov(context.Context, *CreateCityGovRequest) (*CityGov, error)
	UpdateCityGov(context.Context, *UpdateCityGovRequest) (*CityGov, error)
	DeleteCityGov(context.Context, *DeleteCityGovRequest) (*emptypb.Empty, error)
	RefuseCityGovRight(context.Context, *RefuseCityGovRightRequest) (*emptypb.Empty, error)
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*emptypb.Empty, error)
	GetCityGov(context.Context, *GetCityGovRequest) (*CityGov, error)
	GetListCityGovs(context.Context, *ListCityGovsRequest) (*ListCityGovs, error)
	mustEmbedUnimplementedCityGovServiceServer()
}

// UnimplementedCityGovServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCityGovServiceServer struct{}

func (UnimplementedCityGovServiceServer) CreateCityGov(context.Context, *CreateCityGovRequest) (*CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCityGov not implemented")
}
func (UnimplementedCityGovServiceServer) UpdateCityGov(context.Context, *UpdateCityGovRequest) (*CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCityGov not implemented")
}
func (UnimplementedCityGovServiceServer) DeleteCityGov(context.Context, *DeleteCityGovRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCityGov not implemented")
}
func (UnimplementedCityGovServiceServer) RefuseCityGovRight(context.Context, *RefuseCityGovRightRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseCityGovRight not implemented")
}
func (UnimplementedCityGovServiceServer) TransferOwnership(context.Context, *TransferOwnershipRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedCityGovServiceServer) GetCityGov(context.Context, *GetCityGovRequest) (*CityGov, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityGov not implemented")
}
func (UnimplementedCityGovServiceServer) GetListCityGovs(context.Context, *ListCityGovsRequest) (*ListCityGovs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCityGovs not implemented")
}
func (UnimplementedCityGovServiceServer) mustEmbedUnimplementedCityGovServiceServer() {}
func (UnimplementedCityGovServiceServer) testEmbeddedByValue()                        {}

// UnsafeCityGovServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityGovServiceServer will
// result in compilation errors.
type UnsafeCityGovServiceServer interface {
	mustEmbedUnimplementedCityGovServiceServer()
}

func RegisterCityGovServiceServer(s grpc.ServiceRegistrar, srv CityGovServiceServer) {
	// If the following call pancis, it indicates UnimplementedCityGovServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CityGovService_ServiceDesc, srv)
}

func _CityGovService_CreateCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).CreateCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_CreateCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).CreateCityGov(ctx, req.(*CreateCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_UpdateCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).UpdateCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_UpdateCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).UpdateCityGov(ctx, req.(*UpdateCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_DeleteCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).DeleteCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_DeleteCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).DeleteCityGov(ctx, req.(*DeleteCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_RefuseCityGovRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefuseCityGovRightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).RefuseCityGovRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_RefuseCityGovRight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).RefuseCityGovRight(ctx, req.(*RefuseCityGovRightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_TransferOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_GetCityGov_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityGovRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).GetCityGov(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_GetCityGov_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).GetCityGov(ctx, req.(*GetCityGovRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CityGovService_GetListCityGovs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCityGovsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityGovServiceServer).GetListCityGovs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CityGovService_GetListCityGovs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityGovServiceServer).GetListCityGovs(ctx, req.(*ListCityGovsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CityGovService_ServiceDesc is the grpc.ServiceDesc for CityGovService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CityGovService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "citygov.CityGovService",
	HandlerType: (*CityGovServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCityGov",
			Handler:    _CityGovService_CreateCityGov_Handler,
		},
		{
			MethodName: "UpdateCityGov",
			Handler:    _CityGovService_UpdateCityGov_Handler,
		},
		{
			MethodName: "DeleteCityGov",
			Handler:    _CityGovService_DeleteCityGov_Handler,
		},
		{
			MethodName: "RefuseCityGovRight",
			Handler:    _CityGovService_RefuseCityGovRight_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _CityGovService_TransferOwnership_Handler,
		},
		{
			MethodName: "GetCityGov",
			Handler:    _CityGovService_GetCityGov_Handler,
		},
		{
			MethodName: "GetListCityGovs",
			Handler:    _CityGovService_GetListCityGovs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "citygov/citygov.proto",
}
