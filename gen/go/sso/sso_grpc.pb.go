// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sso/sso.proto

package sso

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SsoService_GetOwnUser_FullMethodName              = "/sso.SsoService/GetOwnUser"
	SsoService_RefreshToken_FullMethodName            = "/sso.SsoService/RefreshToken"
	SsoService_GoogleLogin_FullMethodName             = "/sso.SsoService/GoogleLogin"
	SsoService_GoogleCallback_FullMethodName          = "/sso.SsoService/GoogleCallback"
	SsoService_Logout_FullMethodName                  = "/sso.SsoService/Logout"
	SsoService_ListSessions_FullMethodName            = "/sso.SsoService/ListSessions"
	SsoService_DeleteAllSessions_FullMethodName       = "/sso.SsoService/DeleteAllSessions"
	SsoService_GetSession_FullMethodName              = "/sso.SsoService/GetSession"
	SsoService_DeleteSession_FullMethodName           = "/sso.SsoService/DeleteSession"
	SsoService_AdminGetUser_FullMethodName            = "/sso.SsoService/AdminGetUser"
	SsoService_AdminUpdateRole_FullMethodName         = "/sso.SsoService/AdminUpdateRole"
	SsoService_AdminListUserSessions_FullMethodName   = "/sso.SsoService/AdminListUserSessions"
	SsoService_AdminDeleteUserSessions_FullMethodName = "/sso.SsoService/AdminDeleteUserSessions"
	SsoService_AdminGetSession_FullMethodName         = "/sso.SsoService/AdminGetSession"
	SsoService_AdminDeleteSession_FullMethodName      = "/sso.SsoService/AdminDeleteSession"
)

// SsoServiceClient is the client API for SsoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SsoServiceClient interface {
	// Получить информацию о текущем пользователе
	GetOwnUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserResponse, error)
	// Обновить токен доступа
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokensPairResponse, error)
	// Начало входа через Google: возвращает URL для редиректа
	GoogleLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GoogleLoginResponse, error)
	// Коллбек после Google OAuth: принимает код и возвращает пару токенов
	GoogleCallback(ctx context.Context, in *GoogleCallbackRequest, opts ...grpc.CallOption) (*TokensPairResponse, error)
	// Выход пользователя
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Сессии пользователя
	ListSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionsListResponse, error)
	DeleteAllSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionsListResponse, error)
	GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	DeleteSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionsListResponse, error)
	// Админские методы
	AdminGetUser(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	AdminUpdateRole(ctx context.Context, in *AdminUpdateRoleRequest, opts ...grpc.CallOption) (*UserResponse, error)
	AdminListUserSessions(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*SessionsListResponse, error)
	AdminDeleteUserSessions(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*Empty, error)
	AdminGetSession(ctx context.Context, in *AdminGetSessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	AdminDeleteSession(ctx context.Context, in *AdminGetSessionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type ssoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSsoServiceClient(cc grpc.ClientConnInterface) SsoServiceClient {
	return &ssoServiceClient{cc}
}

func (c *ssoServiceClient) GetOwnUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_GetOwnUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokensPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokensPairResponse)
	err := c.cc.Invoke(ctx, SsoService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GoogleLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GoogleLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoogleLoginResponse)
	err := c.cc.Invoke(ctx, SsoService_GoogleLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GoogleCallback(ctx context.Context, in *GoogleCallbackRequest, opts ...grpc.CallOption) (*TokensPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokensPairResponse)
	err := c.cc.Invoke(ctx, SsoService_GoogleCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) ListSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsListResponse)
	err := c.cc.Invoke(ctx, SsoService_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) DeleteAllSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsListResponse)
	err := c.cc.Invoke(ctx, SsoService_DeleteAllSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, SsoService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) DeleteSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsListResponse)
	err := c.cc.Invoke(ctx, SsoService_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminGetUser(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminGetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminUpdateRole(ctx context.Context, in *AdminUpdateRoleRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminUpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminListUserSessions(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*SessionsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsListResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminListUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminDeleteUserSessions(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_AdminDeleteUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminGetSession(ctx context.Context, in *AdminGetSessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminGetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminDeleteSession(ctx context.Context, in *AdminGetSessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_AdminDeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SsoServiceServer is the server API for SsoService service.
// All implementations must embed UnimplementedSsoServiceServer
// for forward compatibility.
type SsoServiceServer interface {
	// Получить информацию о текущем пользователе
	GetOwnUser(context.Context, *Empty) (*UserResponse, error)
	// Обновить токен доступа
	RefreshToken(context.Context, *RefreshTokenRequest) (*TokensPairResponse, error)
	// Начало входа через Google: возвращает URL для редиректа
	GoogleLogin(context.Context, *Empty) (*GoogleLoginResponse, error)
	// Коллбек после Google OAuth: принимает код и возвращает пару токенов
	GoogleCallback(context.Context, *GoogleCallbackRequest) (*TokensPairResponse, error)
	// Выход пользователя
	Logout(context.Context, *Empty) (*Empty, error)
	// Сессии пользователя
	ListSessions(context.Context, *Empty) (*SessionsListResponse, error)
	DeleteAllSessions(context.Context, *Empty) (*SessionsListResponse, error)
	GetSession(context.Context, *SessionRequest) (*SessionResponse, error)
	DeleteSession(context.Context, *SessionRequest) (*SessionsListResponse, error)
	// Админские методы
	AdminGetUser(context.Context, *AdminUserRequest) (*UserResponse, error)
	AdminUpdateRole(context.Context, *AdminUpdateRoleRequest) (*UserResponse, error)
	AdminListUserSessions(context.Context, *AdminUserRequest) (*SessionsListResponse, error)
	AdminDeleteUserSessions(context.Context, *AdminUserRequest) (*Empty, error)
	AdminGetSession(context.Context, *AdminGetSessionRequest) (*SessionResponse, error)
	AdminDeleteSession(context.Context, *AdminGetSessionRequest) (*Empty, error)
	mustEmbedUnimplementedSsoServiceServer()
}

// UnimplementedSsoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSsoServiceServer struct{}

func (UnimplementedSsoServiceServer) GetOwnUser(context.Context, *Empty) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnUser not implemented")
}
func (UnimplementedSsoServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*TokensPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSsoServiceServer) GoogleLogin(context.Context, *Empty) (*GoogleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (UnimplementedSsoServiceServer) GoogleCallback(context.Context, *GoogleCallbackRequest) (*TokensPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleCallback not implemented")
}
func (UnimplementedSsoServiceServer) Logout(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSsoServiceServer) ListSessions(context.Context, *Empty) (*SessionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedSsoServiceServer) DeleteAllSessions(context.Context, *Empty) (*SessionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllSessions not implemented")
}
func (UnimplementedSsoServiceServer) GetSession(context.Context, *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSsoServiceServer) DeleteSession(context.Context, *SessionRequest) (*SessionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedSsoServiceServer) AdminGetUser(context.Context, *AdminUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetUser not implemented")
}
func (UnimplementedSsoServiceServer) AdminUpdateRole(context.Context, *AdminUpdateRoleRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateRole not implemented")
}
func (UnimplementedSsoServiceServer) AdminListUserSessions(context.Context, *AdminUserRequest) (*SessionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListUserSessions not implemented")
}
func (UnimplementedSsoServiceServer) AdminDeleteUserSessions(context.Context, *AdminUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteUserSessions not implemented")
}
func (UnimplementedSsoServiceServer) AdminGetSession(context.Context, *AdminGetSessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetSession not implemented")
}
func (UnimplementedSsoServiceServer) AdminDeleteSession(context.Context, *AdminGetSessionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteSession not implemented")
}
func (UnimplementedSsoServiceServer) mustEmbedUnimplementedSsoServiceServer() {}
func (UnimplementedSsoServiceServer) testEmbeddedByValue()                    {}

// UnsafeSsoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SsoServiceServer will
// result in compilation errors.
type UnsafeSsoServiceServer interface {
	mustEmbedUnimplementedSsoServiceServer()
}

func RegisterSsoServiceServer(s grpc.ServiceRegistrar, srv SsoServiceServer) {
	// If the following call pancis, it indicates UnimplementedSsoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SsoService_ServiceDesc, srv)
}

func _SsoService_GetOwnUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GetOwnUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GetOwnUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GetOwnUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GoogleLogin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GoogleCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GoogleCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GoogleCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GoogleCallback(ctx, req.(*GoogleCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).ListSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_DeleteAllSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).DeleteAllSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_DeleteAllSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).DeleteAllSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GetSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).DeleteSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminGetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminGetUser(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminUpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminUpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminUpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminUpdateRole(ctx, req.(*AdminUpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminListUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminListUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminListUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminListUserSessions(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminDeleteUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminDeleteUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminDeleteUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminDeleteUserSessions(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminGetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminGetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminGetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminGetSession(ctx, req.(*AdminGetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminDeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminDeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminDeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminDeleteSession(ctx, req.(*AdminGetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SsoService_ServiceDesc is the grpc.ServiceDesc for SsoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SsoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.SsoService",
	HandlerType: (*SsoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOwnUser",
			Handler:    _SsoService_GetOwnUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _SsoService_RefreshToken_Handler,
		},
		{
			MethodName: "GoogleLogin",
			Handler:    _SsoService_GoogleLogin_Handler,
		},
		{
			MethodName: "GoogleCallback",
			Handler:    _SsoService_GoogleCallback_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SsoService_Logout_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _SsoService_ListSessions_Handler,
		},
		{
			MethodName: "DeleteAllSessions",
			Handler:    _SsoService_DeleteAllSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _SsoService_GetSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _SsoService_DeleteSession_Handler,
		},
		{
			MethodName: "AdminGetUser",
			Handler:    _SsoService_AdminGetUser_Handler,
		},
		{
			MethodName: "AdminUpdateRole",
			Handler:    _SsoService_AdminUpdateRole_Handler,
		},
		{
			MethodName: "AdminListUserSessions",
			Handler:    _SsoService_AdminListUserSessions_Handler,
		},
		{
			MethodName: "AdminDeleteUserSessions",
			Handler:    _SsoService_AdminDeleteUserSessions_Handler,
		},
		{
			MethodName: "AdminGetSession",
			Handler:    _SsoService_AdminGetSession_Handler,
		},
		{
			MethodName: "AdminDeleteSession",
			Handler:    _SsoService_AdminDeleteSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/sso.proto",
}
