// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sso/sso.proto

package sso

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SsoService_GetUser_FullMethodName                    = "/sso.SsoService/GetUser"
	SsoService_RefreshToken_FullMethodName               = "/sso.SsoService/RefreshToken"
	SsoService_GoogleLogin_FullMethodName                = "/sso.SsoService/GoogleLogin"
	SsoService_GoogleCallback_FullMethodName             = "/sso.SsoService/GoogleCallback"
	SsoService_Logout_FullMethodName                     = "/sso.SsoService/Logout"
	SsoService_GetUserSession_FullMethodName             = "/sso.SsoService/GetUserSession"
	SsoService_GetUserSessions_FullMethodName            = "/sso.SsoService/GetUserSessions"
	SsoService_DeleteUserSession_FullMethodName          = "/sso.SsoService/DeleteUserSession"
	SsoService_TerminateUserSessions_FullMethodName      = "/sso.SsoService/TerminateUserSessions"
	SsoService_AdminDeleteUserSession_FullMethodName     = "/sso.SsoService/AdminDeleteUserSession"
	SsoService_AdminTerminateUserSessions_FullMethodName = "/sso.SsoService/AdminTerminateUserSessions"
)

// SsoServiceClient is the client API for SsoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SsoServiceClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokensPairResponse, error)
	GoogleLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GoogleLoginResponse, error)
	GoogleCallback(ctx context.Context, in *GoogleCallbackRequest, opts ...grpc.CallOption) (*TokensPairResponse, error)
	Logout(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUserSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	GetUserSessions(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionsListResponse, error)
	DeleteUserSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionsListResponse, error)
	TerminateUserSessions(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error)
	AdminDeleteUserSession(ctx context.Context, in *AdminSessionRequest, opts ...grpc.CallOption) (*SessionsListResponse, error)
	AdminTerminateUserSessions(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*Empty, error)
}

type ssoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSsoServiceClient(cc grpc.ClientConnInterface) SsoServiceClient {
	return &ssoServiceClient{cc}
}

func (c *ssoServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokensPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokensPairResponse)
	err := c.cc.Invoke(ctx, SsoService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GoogleLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GoogleLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoogleLoginResponse)
	err := c.cc.Invoke(ctx, SsoService_GoogleLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GoogleCallback(ctx context.Context, in *GoogleCallbackRequest, opts ...grpc.CallOption) (*TokensPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokensPairResponse)
	err := c.cc.Invoke(ctx, SsoService_GoogleCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) Logout(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GetUserSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, SsoService_GetUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GetUserSessions(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*SessionsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsListResponse)
	err := c.cc.Invoke(ctx, SsoService_GetUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) DeleteUserSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsListResponse)
	err := c.cc.Invoke(ctx, SsoService_DeleteUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) TerminateUserSessions(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_TerminateUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminDeleteUserSession(ctx context.Context, in *AdminSessionRequest, opts ...grpc.CallOption) (*SessionsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsListResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminDeleteUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminTerminateUserSessions(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_AdminTerminateUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SsoServiceServer is the server API for SsoService service.
// All implementations must embed UnimplementedSsoServiceServer
// for forward compatibility.
type SsoServiceServer interface {
	GetUser(context.Context, *UserRequest) (*UserResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*TokensPairResponse, error)
	GoogleLogin(context.Context, *Empty) (*GoogleLoginResponse, error)
	GoogleCallback(context.Context, *GoogleCallbackRequest) (*TokensPairResponse, error)
	Logout(context.Context, *SessionRequest) (*Empty, error)
	GetUserSession(context.Context, *SessionRequest) (*SessionResponse, error)
	GetUserSessions(context.Context, *UserRequest) (*SessionsListResponse, error)
	DeleteUserSession(context.Context, *SessionRequest) (*SessionsListResponse, error)
	TerminateUserSessions(context.Context, *UserRequest) (*Empty, error)
	AdminDeleteUserSession(context.Context, *AdminSessionRequest) (*SessionsListResponse, error)
	AdminTerminateUserSessions(context.Context, *AdminUserRequest) (*Empty, error)
	mustEmbedUnimplementedSsoServiceServer()
}

// UnimplementedSsoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSsoServiceServer struct{}

func (UnimplementedSsoServiceServer) GetUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedSsoServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*TokensPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSsoServiceServer) GoogleLogin(context.Context, *Empty) (*GoogleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (UnimplementedSsoServiceServer) GoogleCallback(context.Context, *GoogleCallbackRequest) (*TokensPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleCallback not implemented")
}
func (UnimplementedSsoServiceServer) Logout(context.Context, *SessionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSsoServiceServer) GetUserSession(context.Context, *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSession not implemented")
}
func (UnimplementedSsoServiceServer) GetUserSessions(context.Context, *UserRequest) (*SessionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSessions not implemented")
}
func (UnimplementedSsoServiceServer) DeleteUserSession(context.Context, *SessionRequest) (*SessionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSession not implemented")
}
func (UnimplementedSsoServiceServer) TerminateUserSessions(context.Context, *UserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateUserSessions not implemented")
}
func (UnimplementedSsoServiceServer) AdminDeleteUserSession(context.Context, *AdminSessionRequest) (*SessionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteUserSession not implemented")
}
func (UnimplementedSsoServiceServer) AdminTerminateUserSessions(context.Context, *AdminUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTerminateUserSessions not implemented")
}
func (UnimplementedSsoServiceServer) mustEmbedUnimplementedSsoServiceServer() {}
func (UnimplementedSsoServiceServer) testEmbeddedByValue()                    {}

// UnsafeSsoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SsoServiceServer will
// result in compilation errors.
type UnsafeSsoServiceServer interface {
	mustEmbedUnimplementedSsoServiceServer()
}

func RegisterSsoServiceServer(s grpc.ServiceRegistrar, srv SsoServiceServer) {
	// If the following call pancis, it indicates UnimplementedSsoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SsoService_ServiceDesc, srv)
}

func _SsoService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GoogleLogin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GoogleCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GoogleCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GoogleCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GoogleCallback(ctx, req.(*GoogleCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).Logout(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GetUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GetUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GetUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GetUserSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GetUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GetUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GetUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GetUserSessions(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_DeleteUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).DeleteUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_DeleteUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).DeleteUserSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_TerminateUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).TerminateUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_TerminateUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).TerminateUserSessions(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminDeleteUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminDeleteUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminDeleteUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminDeleteUserSession(ctx, req.(*AdminSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminTerminateUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminTerminateUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminTerminateUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminTerminateUserSessions(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SsoService_ServiceDesc is the grpc.ServiceDesc for SsoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SsoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.SsoService",
	HandlerType: (*SsoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _SsoService_GetUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _SsoService_RefreshToken_Handler,
		},
		{
			MethodName: "GoogleLogin",
			Handler:    _SsoService_GoogleLogin_Handler,
		},
		{
			MethodName: "GoogleCallback",
			Handler:    _SsoService_GoogleCallback_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SsoService_Logout_Handler,
		},
		{
			MethodName: "GetUserSession",
			Handler:    _SsoService_GetUserSession_Handler,
		},
		{
			MethodName: "GetUserSessions",
			Handler:    _SsoService_GetUserSessions_Handler,
		},
		{
			MethodName: "DeleteUserSession",
			Handler:    _SsoService_DeleteUserSession_Handler,
		},
		{
			MethodName: "TerminateUserSessions",
			Handler:    _SsoService_TerminateUserSessions_Handler,
		},
		{
			MethodName: "AdminDeleteUserSession",
			Handler:    _SsoService_AdminDeleteUserSession_Handler,
		},
		{
			MethodName: "AdminTerminateUserSessions",
			Handler:    _SsoService_AdminTerminateUserSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/sso.proto",
}
