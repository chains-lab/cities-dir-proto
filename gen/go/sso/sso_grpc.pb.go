// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: sso/sso.proto

package sso

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SsoService_GetUser_FullMethodName                     = "/sso.SsoService/GetUser"
	SsoService_GoogleLogin_FullMethodName                 = "/sso.SsoService/GoogleLogin"
	SsoService_GoogleCallback_FullMethodName              = "/sso.SsoService/GoogleCallback"
	SsoService_Logout_FullMethodName                      = "/sso.SsoService/Logout"
	SsoService_RefreshToken_FullMethodName                = "/sso.SsoService/RefreshToken"
	SsoService_GetUserSession_FullMethodName              = "/sso.SsoService/GetUserSession"
	SsoService_GetUserSessions_FullMethodName             = "/sso.SsoService/GetUserSessions"
	SsoService_DeleteUserSession_FullMethodName           = "/sso.SsoService/DeleteUserSession"
	SsoService_TerminateUserSessions_FullMethodName       = "/sso.SsoService/TerminateUserSessions"
	SsoService_AdminGetUser_FullMethodName                = "/sso.SsoService/AdminGetUser"
	SsoService_AdminUpdateUserRole_FullMethodName         = "/sso.SsoService/AdminUpdateUserRole"
	SsoService_AdminUpdateUserSubscription_FullMethodName = "/sso.SsoService/AdminUpdateUserSubscription"
	SsoService_AdminUpdateUserSuspended_FullMethodName    = "/sso.SsoService/AdminUpdateUserSuspended"
	SsoService_AdminUpdateUserVerified_FullMethodName     = "/sso.SsoService/AdminUpdateUserVerified"
	SsoService_AdminGetUserSessions_FullMethodName        = "/sso.SsoService/AdminGetUserSessions"
	SsoService_AdminGetUserSession_FullMethodName         = "/sso.SsoService/AdminGetUserSession"
	SsoService_AdminDeleteUserSession_FullMethodName      = "/sso.SsoService/AdminDeleteUserSession"
	SsoService_AdminTerminateUserSessions_FullMethodName  = "/sso.SsoService/AdminTerminateUserSessions"
)

// SsoServiceClient is the client API for SsoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SsoServiceClient interface {
	GetUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserResponse, error)
	// Google OAuth operations
	GoogleLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GoogleLoginResponse, error)
	GoogleCallback(ctx context.Context, in *GoogleCallbackRequest, opts ...grpc.CallOption) (*TokensPairResponse, error)
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokensPairResponse, error)
	GetUserSession(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionResponse, error)
	GetUserSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionsListResponse, error)
	DeleteUserSession(ctx context.Context, in *DeleteUserSessionRequest, opts ...grpc.CallOption) (*Empty, error)
	TerminateUserSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	AdminGetUser(ctx context.Context, in *AdminGetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	AdminUpdateUserRole(ctx context.Context, in *AdminUpdateUserRoleRequest, opts ...grpc.CallOption) (*UserResponse, error)
	AdminUpdateUserSubscription(ctx context.Context, in *AdminUpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UserResponse, error)
	AdminUpdateUserSuspended(ctx context.Context, in *AdminUpdateUserSuspendedRequest, opts ...grpc.CallOption) (*UserResponse, error)
	AdminUpdateUserVerified(ctx context.Context, in *AdminUpdateUserVerifiedRequest, opts ...grpc.CallOption) (*UserResponse, error)
	AdminGetUserSessions(ctx context.Context, in *AdminGetUserSessionsRequest, opts ...grpc.CallOption) (*SessionsListResponse, error)
	AdminGetUserSession(ctx context.Context, in *AdminGetUserSessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	AdminDeleteUserSession(ctx context.Context, in *AdminDeleteUserSessionRequest, opts ...grpc.CallOption) (*Empty, error)
	AdminTerminateUserSessions(ctx context.Context, in *AdminTerminateUserSessionsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type ssoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSsoServiceClient(cc grpc.ClientConnInterface) SsoServiceClient {
	return &ssoServiceClient{cc}
}

func (c *ssoServiceClient) GetUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GoogleLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GoogleLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoogleLoginResponse)
	err := c.cc.Invoke(ctx, SsoService_GoogleLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GoogleCallback(ctx context.Context, in *GoogleCallbackRequest, opts ...grpc.CallOption) (*TokensPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokensPairResponse)
	err := c.cc.Invoke(ctx, SsoService_GoogleCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokensPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokensPairResponse)
	err := c.cc.Invoke(ctx, SsoService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GetUserSession(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, SsoService_GetUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) GetUserSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsListResponse)
	err := c.cc.Invoke(ctx, SsoService_GetUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) DeleteUserSession(ctx context.Context, in *DeleteUserSessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_DeleteUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) TerminateUserSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_TerminateUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminGetUser(ctx context.Context, in *AdminGetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminGetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminUpdateUserRole(ctx context.Context, in *AdminUpdateUserRoleRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminUpdateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminUpdateUserSubscription(ctx context.Context, in *AdminUpdateUserSubscriptionRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminUpdateUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminUpdateUserSuspended(ctx context.Context, in *AdminUpdateUserSuspendedRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminUpdateUserSuspended_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminUpdateUserVerified(ctx context.Context, in *AdminUpdateUserVerifiedRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminUpdateUserVerified_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminGetUserSessions(ctx context.Context, in *AdminGetUserSessionsRequest, opts ...grpc.CallOption) (*SessionsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionsListResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminGetUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminGetUserSession(ctx context.Context, in *AdminGetUserSessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, SsoService_AdminGetUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminDeleteUserSession(ctx context.Context, in *AdminDeleteUserSessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_AdminDeleteUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoServiceClient) AdminTerminateUserSessions(ctx context.Context, in *AdminTerminateUserSessionsRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SsoService_AdminTerminateUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SsoServiceServer is the server API for SsoService service.
// All implementations must embed UnimplementedSsoServiceServer
// for forward compatibility.
type SsoServiceServer interface {
	GetUser(context.Context, *Empty) (*UserResponse, error)
	// Google OAuth operations
	GoogleLogin(context.Context, *Empty) (*GoogleLoginResponse, error)
	GoogleCallback(context.Context, *GoogleCallbackRequest) (*TokensPairResponse, error)
	Logout(context.Context, *Empty) (*Empty, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*TokensPairResponse, error)
	GetUserSession(context.Context, *Empty) (*SessionResponse, error)
	GetUserSessions(context.Context, *Empty) (*SessionsListResponse, error)
	DeleteUserSession(context.Context, *DeleteUserSessionRequest) (*Empty, error)
	TerminateUserSessions(context.Context, *Empty) (*Empty, error)
	AdminGetUser(context.Context, *AdminGetUserRequest) (*UserResponse, error)
	AdminUpdateUserRole(context.Context, *AdminUpdateUserRoleRequest) (*UserResponse, error)
	AdminUpdateUserSubscription(context.Context, *AdminUpdateUserSubscriptionRequest) (*UserResponse, error)
	AdminUpdateUserSuspended(context.Context, *AdminUpdateUserSuspendedRequest) (*UserResponse, error)
	AdminUpdateUserVerified(context.Context, *AdminUpdateUserVerifiedRequest) (*UserResponse, error)
	AdminGetUserSessions(context.Context, *AdminGetUserSessionsRequest) (*SessionsListResponse, error)
	AdminGetUserSession(context.Context, *AdminGetUserSessionRequest) (*SessionResponse, error)
	AdminDeleteUserSession(context.Context, *AdminDeleteUserSessionRequest) (*Empty, error)
	AdminTerminateUserSessions(context.Context, *AdminTerminateUserSessionsRequest) (*Empty, error)
	mustEmbedUnimplementedSsoServiceServer()
}

// UnimplementedSsoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSsoServiceServer struct{}

func (UnimplementedSsoServiceServer) GetUser(context.Context, *Empty) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedSsoServiceServer) GoogleLogin(context.Context, *Empty) (*GoogleLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleLogin not implemented")
}
func (UnimplementedSsoServiceServer) GoogleCallback(context.Context, *GoogleCallbackRequest) (*TokensPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoogleCallback not implemented")
}
func (UnimplementedSsoServiceServer) Logout(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSsoServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*TokensPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSsoServiceServer) GetUserSession(context.Context, *Empty) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSession not implemented")
}
func (UnimplementedSsoServiceServer) GetUserSessions(context.Context, *Empty) (*SessionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSessions not implemented")
}
func (UnimplementedSsoServiceServer) DeleteUserSession(context.Context, *DeleteUserSessionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSession not implemented")
}
func (UnimplementedSsoServiceServer) TerminateUserSessions(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateUserSessions not implemented")
}
func (UnimplementedSsoServiceServer) AdminGetUser(context.Context, *AdminGetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetUser not implemented")
}
func (UnimplementedSsoServiceServer) AdminUpdateUserRole(context.Context, *AdminUpdateUserRoleRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateUserRole not implemented")
}
func (UnimplementedSsoServiceServer) AdminUpdateUserSubscription(context.Context, *AdminUpdateUserSubscriptionRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateUserSubscription not implemented")
}
func (UnimplementedSsoServiceServer) AdminUpdateUserSuspended(context.Context, *AdminUpdateUserSuspendedRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateUserSuspended not implemented")
}
func (UnimplementedSsoServiceServer) AdminUpdateUserVerified(context.Context, *AdminUpdateUserVerifiedRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateUserVerified not implemented")
}
func (UnimplementedSsoServiceServer) AdminGetUserSessions(context.Context, *AdminGetUserSessionsRequest) (*SessionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetUserSessions not implemented")
}
func (UnimplementedSsoServiceServer) AdminGetUserSession(context.Context, *AdminGetUserSessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetUserSession not implemented")
}
func (UnimplementedSsoServiceServer) AdminDeleteUserSession(context.Context, *AdminDeleteUserSessionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteUserSession not implemented")
}
func (UnimplementedSsoServiceServer) AdminTerminateUserSessions(context.Context, *AdminTerminateUserSessionsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTerminateUserSessions not implemented")
}
func (UnimplementedSsoServiceServer) mustEmbedUnimplementedSsoServiceServer() {}
func (UnimplementedSsoServiceServer) testEmbeddedByValue()                    {}

// UnsafeSsoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SsoServiceServer will
// result in compilation errors.
type UnsafeSsoServiceServer interface {
	mustEmbedUnimplementedSsoServiceServer()
}

func RegisterSsoServiceServer(s grpc.ServiceRegistrar, srv SsoServiceServer) {
	// If the following call pancis, it indicates UnimplementedSsoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SsoService_ServiceDesc, srv)
}

func _SsoService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GetUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GoogleLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GoogleLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GoogleLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GoogleLogin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GoogleCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GoogleCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GoogleCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GoogleCallback(ctx, req.(*GoogleCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GetUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GetUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GetUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GetUserSession(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_GetUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).GetUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_GetUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).GetUserSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_DeleteUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).DeleteUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_DeleteUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).DeleteUserSession(ctx, req.(*DeleteUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_TerminateUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).TerminateUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_TerminateUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).TerminateUserSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminGetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminGetUser(ctx, req.(*AdminGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminUpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminUpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminUpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminUpdateUserRole(ctx, req.(*AdminUpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminUpdateUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminUpdateUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminUpdateUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminUpdateUserSubscription(ctx, req.(*AdminUpdateUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminUpdateUserSuspended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateUserSuspendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminUpdateUserSuspended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminUpdateUserSuspended_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminUpdateUserSuspended(ctx, req.(*AdminUpdateUserSuspendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminUpdateUserVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateUserVerifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminUpdateUserVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminUpdateUserVerified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminUpdateUserVerified(ctx, req.(*AdminUpdateUserVerifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminGetUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminGetUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminGetUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminGetUserSessions(ctx, req.(*AdminGetUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminGetUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminGetUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminGetUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminGetUserSession(ctx, req.(*AdminGetUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminDeleteUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminDeleteUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminDeleteUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminDeleteUserSession(ctx, req.(*AdminDeleteUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SsoService_AdminTerminateUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminTerminateUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServiceServer).AdminTerminateUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SsoService_AdminTerminateUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServiceServer).AdminTerminateUserSessions(ctx, req.(*AdminTerminateUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SsoService_ServiceDesc is the grpc.ServiceDesc for SsoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SsoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.SsoService",
	HandlerType: (*SsoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _SsoService_GetUser_Handler,
		},
		{
			MethodName: "GoogleLogin",
			Handler:    _SsoService_GoogleLogin_Handler,
		},
		{
			MethodName: "GoogleCallback",
			Handler:    _SsoService_GoogleCallback_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SsoService_Logout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _SsoService_RefreshToken_Handler,
		},
		{
			MethodName: "GetUserSession",
			Handler:    _SsoService_GetUserSession_Handler,
		},
		{
			MethodName: "GetUserSessions",
			Handler:    _SsoService_GetUserSessions_Handler,
		},
		{
			MethodName: "DeleteUserSession",
			Handler:    _SsoService_DeleteUserSession_Handler,
		},
		{
			MethodName: "TerminateUserSessions",
			Handler:    _SsoService_TerminateUserSessions_Handler,
		},
		{
			MethodName: "AdminGetUser",
			Handler:    _SsoService_AdminGetUser_Handler,
		},
		{
			MethodName: "AdminUpdateUserRole",
			Handler:    _SsoService_AdminUpdateUserRole_Handler,
		},
		{
			MethodName: "AdminUpdateUserSubscription",
			Handler:    _SsoService_AdminUpdateUserSubscription_Handler,
		},
		{
			MethodName: "AdminUpdateUserSuspended",
			Handler:    _SsoService_AdminUpdateUserSuspended_Handler,
		},
		{
			MethodName: "AdminUpdateUserVerified",
			Handler:    _SsoService_AdminUpdateUserVerified_Handler,
		},
		{
			MethodName: "AdminGetUserSessions",
			Handler:    _SsoService_AdminGetUserSessions_Handler,
		},
		{
			MethodName: "AdminGetUserSession",
			Handler:    _SsoService_AdminGetUserSession_Handler,
		},
		{
			MethodName: "AdminDeleteUserSession",
			Handler:    _SsoService_AdminDeleteUserSession_Handler,
		},
		{
			MethodName: "AdminTerminateUserSessions",
			Handler:    _SsoService_AdminTerminateUserSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/sso.proto",
}
